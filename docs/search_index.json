[["index.html", "R cookbook for the casual dabbler Chapter 1 Introduction 1.1 Usage 1.2 Additional resources 1.3 Limitations 1.4 About the author", " R cookbook for the casual dabbler Charles Coverdale 2021-12-12 Chapter 1 Introduction G’day and welcome to R cookbook for the casual dabbler. Some history: I use R a lot for work and for side projects. Over the years I’ve collated a bunch of useful scripts, from macroeconomic analysis to quick hacks for making map legends format properly. Historically my code has been stored in random Rpubs documents, medium articles, and a bunch of .Rmd files on my hardrive. Occasionally I feel like doing things properly - and upload code to a repository on github. It doesn’t take a genius to realize this isn’t a very sustainable solution - and it also isn’t very useful for sharing code with others. It turns out 2-years of lockdown in Melbourne was enough incentive to sit down and collate my best and most useful code into a single place. In the spirit of open source, a book seemed like the most logical format. The following is a very rough book written in markdown - R’s very own publishing language. 1.1 Usage In each chapter I’ve written up the background, methodology and code for a separate piece of analysis. Most of this code will not be extraordinary to the seasoned R aficionado. The vast majority can be found elsewhere if you dig around on stackexchange or read some of Hadley’s books. However I find that in classic Pareto style ~20% of my code contributes to the vast majority of my work output. Having this on hand will hopefully be useful to both myself and others. 1.2 Additional resources The R community is continually writing new books and package documentation with great worked examples. Some of my favourites (which all happen to be written in the R markdown language) are: Geocomputation with R R Markdown: The Definite Guide R Cookbook, 2nd Edition R for Data Science Data Science in Education using R Introduction to R: Walter and Eliza Hall Institute PhD lectures notes in environmental economics and data science (University of Oregon) 1.3 Limitations I’ll be honest with you - there’s bound to be bugs galore in this. If you find one (along with spelling errors etc) please email me at charlesfcoverdale@gmail.com with the subject line ‘R cookbook for the casual dabbler.’ 1.4 About the author Charles Coverdale is an economist based in Melbourne, Australia. He is passionate about economics, climate science, and building talented teams. You can get in touch with Charles on twitter to hear more about his current projects. "],["making-beautiful-maps-in-r.html", "Chapter 2 Making beautiful maps in R 2.1 Why use a map 2.2 Getting started 2.3 Making your first map 2.4 From okay to good 2.5 From good to great 2.6 From great to fantastic", " Chapter 2 Making beautiful maps in R 2.1 Why use a map Maps are a great way to communicate data. They’re easily understandable, flexible, and more intuitive than a chart. There’s been numerous studies showing that the average professional often struggles to interpret the units on a y-axis, let alone understand trends in scatter or line graphs. Making maps in R takes some initial investment (note: they can be fiddly). However once you have some code you know and understand, spinning up new pieces of analysis can happen in minutes, rather than hours or days. The aim of this quick-reference guide is to get you from ‘I can produce a map in R’ to something more like ‘I can conduct spatial analysis and produce a visual which is ready to send without any further work.’ 2.2 Getting started First up, we need to load a bunch of packages. #Loads the required required packages library(plyr) library(dplyr) library(vctrs) library(tidyr) library(ggplot2) library(tmap) library(ggmap) library(dplyr) library(sf) library(ggspatial) library(rlang) library(broom) library(tidyverse) library(readxl) library(purrr) library(Census2016) library(absmapsdata) library(officer) The absmapsdata package is particularly important, as it contains most ASGS shapefiles (the ones found on the ABS website). The main ASGS structures and their names in this package are: SA1 2016: sa12016 SA2 2016: sa22016 SA3 2016: sa32016 SA4 2016: sa42016 Greater Capital Cities 2016: gcc2016 Remoteness Areas 2016: ra2016 State 2016: state2016 2.3 Making your first map To get a basic demographic map up and running, we will splice together the ABS SA2 shapefile and some data from the 2016 Australian Census. There is a fantastic packaged called Census2016 which makes downloading this data in a clean format easy. #Get the shapefile form the absmapsdata package (predefined in the list above) #Get the 2016 census dataset census2016_wide &lt;- Census2016_wide_by_SA2_year #Select the key demographic columns from the census data (i.e. the first 8 variables) census_short &lt;- census2016_wide[,1:8] #Filter for a single year census_short_2016 &lt;- census_short %&gt;% filter(year==2016) #Use the inner_join function to get the shapefile and census wide data into a single df for analysis / visualisation SA2_shp_census_2016 &lt;- inner_join(sa22016,census_short_2016, by = c(&quot;sa2_name_2016&quot; = &quot;sa2_name&quot;)) #Plot a map that uses census data map1 &lt;- ggplot() + geom_sf(data = SA2_shp_census_2016, aes(fill = median_age)) + ggtitle(&quot;Australian median age (SA2)&quot;) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() + theme(legend.position = &quot;right&quot;) map1 There we go! This looks ‘okay’… but it can be much better. 2.4 From okay to good Heat maps don’t really show too much interesting data on such a large scale, so let’s filter down to Greater Melbourne. Seeing we have a bunch of census data in our dataframe, we can also do some basic analysis (e.g. population density). #As a bit of an added extra, we can create a new population density column SA2_shp_census_2016 &lt;- SA2_shp_census_2016 %&gt;% mutate(pop_density=persons/areasqkm_2016) #Filter for Greater Melbourne MEL_SA2_shp_census_2016 &lt;- SA2_shp_census_2016 %&gt;% filter(gcc_name_2016==&quot;Greater Melbourne&quot;) #Plot the new map just for Greater Melbourne map2 &lt;- ggplot() + geom_sf(data = MEL_SA2_shp_census_2016, aes(fill = median_age, border=NA)) + ggtitle(&quot;Median age in Melbourne (SA2)&quot;) + xlab(&quot;Longitude&quot;) + ylab(&quot;Latitude&quot;) + theme_bw() + theme(legend.position = &quot;right&quot;) map2 Much better. We can start to see some trends in this map. It looks like younger people tend to live closer to the city center. This seems logical. 2.5 From good to great The map above is a good start! However, how do we turn this from something ‘good,’ into something that is 100% ready to share? We see our ‘ink to chart ratio’ (i.e. the amount of non-data stuff that is on the page) is still pretty high. Is the latitude of Melbourne useful for this analysis…? Not really. Let’s get rid of it and the axis labels. A few lines of code adjusting the axis, titles, and theme of the plot will go a long way. Because my geography Professor drilled it into me, I will also add a low-key scale bar. map3 &lt;- ggplot() + geom_sf(data = MEL_SA2_shp_census_2016, aes(fill = median_age)) + labs(title=&quot;Melbourne&#39;s youth tend to live closer to the city centre&quot;, subtitle = &quot;Analysis from the 2016 census&quot;, caption = &quot;Data: Australian Bureau of Statistics 2016&quot;, x=&quot;&quot;, y=&quot;&quot;, fill=&quot;Median age&quot;) + ggspatial::annotation_scale(location=&quot;br&quot;)+ theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;right&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) map3 2.6 From great to fantastic The above is perfectly reasonable and looks professionally designed. However, this is where we can get really special. Let’s add a custom colour scheme, drop the boundary edges for the SA2’s, and add in a dot and label for Melbourne CBD. #Add in a point for the Melbourne CBD MEL_location &lt;- data.frame(town_name = c(&quot;Melbourne&quot;), x = c(144.9631), y = c(-37.8136)) map4 &lt;- ggplot() + geom_sf(data = MEL_SA2_shp_census_2016, aes(fill = median_age),color=NA) + geom_point(data=MEL_location,aes(x=x,y=y),size=2,color=&quot;black&quot;)+ labs(title=&quot;Melbourne&#39;s youth tend to live closer to the city centre&quot;, subtitle = &quot;Analysis from the 2016 census&quot;, caption = &quot;Data: Australian Bureau of Statistics 2016&quot;, x=&quot;&quot;, y=&quot;&quot;, fill=&quot;Median age&quot;) + scale_fill_steps(low=&quot;#E2E0EB&quot;, high=&quot;#3C33FE&quot;)+ annotate(geom=&#39;curve&#39;, x=144.9631, y=-37.8136, xend=144.9, yend=-38.05, curvature=0.5, arrow=arrow(length=unit(2,&quot;mm&quot;)))+ annotate(geom=&#39;text&#39;,x=144.76,y=-38.1,label=&quot;Melbourne CBD&quot;)+ ggspatial::annotation_scale(location=&quot;br&quot;)+ theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;right&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) map4 There we go! A ‘client-ready’ looking map that can be added to a report, presentation, or with a few tweaks a digital dashboard. Make sure to export the map as a high quality PNG using the ggsave function. "],["basic-modelling-in-r.html", "Chapter 3 Basic modelling in R 3.1 Source, format, and plot data 3.2 Build a linear model 3.3 Analyse the model fit 3.4 Compare the predicted values with the actual values 3.5 Analyse the residuals 3.6 Linear regression with more than one variable 3.7 Fitting a polynomial regression", " Chapter 3 Basic modelling in R Creating a model is an essential part of forecasting and data analysis. I’ve put together a quick guide on my process for modelling data and checking model fit. The source data I use in this example is Melbourne’s weather record over a 12 month period. Daily temperature is based on macroscale weather and climate systems, however many observable measurements are correlated (i.e. hot days tend to have lots of sunshine). This makes using weather data great for model building. 3.1 Source, format, and plot data Before we get started, it is useful to have some packages up and running. #Useful packages for regression library(readr) library(readxl) library(ggplot2) library(dplyr) library(tidyverse) library(lubridate) library(modelr) library(cowplot) I’ve put together a csv file of weather observations in Melbourne in 2019. We begin our model by downloading the data from Github. #Input data link &lt;- &quot;data/MEL_weather_2019.csv&quot; # We&#39;ll read this data in as a dataframe # The &#39;check.names&#39; function set to false means the funny units that the BOM use for column names won&#39;t affect the import. MEL_weather_2019 &lt;- read.csv(link, check.names = F) head(MEL_weather_2019) This data is relatively clean. One handy change to make is to make the date into a dynamic format (to easily switch between months, years, etc). #Add a proper date column MEL_weather_2019 &lt;- MEL_weather_2019 %&gt;% mutate(Date = make_date(Year, Month, Day)) We also notice that some of the column names have symbols in them. This can be tricky to work with, so let’s rename some columns into something more manageable. #Rename key df variables names(MEL_weather_2019)[4]&lt;- &quot;Solar_exposure&quot; names(MEL_weather_2019)[5]&lt;- &quot;Rainfall&quot; names(MEL_weather_2019)[6]&lt;- &quot;Max_temp&quot; head(MEL_weather_2019) We’re aiming to investigate if other weather variables can predict maximum temperatures. Solar exposure seems like a plausible place to start. We start by plotting the two variables to if there is a trend. #Plot the data MEL_temp_investigate &lt;- ggplot(MEL_weather_2019)+ geom_point(aes(y=Max_temp, x=Solar_exposure),col=&quot;grey&quot;)+ labs(title = &quot;Does solar exposure drive temperature in Melbourne?&quot;, caption = &quot;Data: Bureau of Meteorology 2020&quot;) + xlab(&quot;Solar exposure&quot;)+ ylab(&quot;Maximum temperature °C&quot;)+ scale_x_continuous(expand=c(0,0))+ theme_bw()+ theme(axis.text=element_text(size=10))+ theme(panel.grid.minor = element_blank()) MEL_temp_investigate Eyeballing the chart above, there seems to be a correlation between the two data sets. We’ll do one more quick plot to analyse the data. What is the distribution of temperature? ggplot(MEL_weather_2019, aes(x=Max_temp)) + geom_histogram(aes(y=..density..), colour=&quot;black&quot;, fill=&quot;lightblue&quot;)+ geom_density(alpha=.5, fill=&quot;grey&quot;,colour=&quot;darkblue&quot;)+ scale_x_continuous(breaks=c(5,10,15,20,25,30,35,40,45), expand=c(0,0))+ xlab(&quot;Temperature&quot;)+ ylab(&quot;Density&quot;)+ theme_bw()+ theme(axis.text=element_text(size=12))+ theme(panel.grid.minor = element_blank()) We can see here the data is right skewed (i.e. the mean will be greater than the median). We’ll need to keep this in mind. Let’s start building a model. 3.2 Build a linear model We start by looking whether a simple linear regression of solar exposure seems to be correlated with temperature. In R, we can use the linear model (lm) function. #Create a straight line estimate to fit the data temp_model &lt;- lm(Max_temp~Solar_exposure, data=MEL_weather_2019) 3.3 Analyse the model fit Let’s see how well solar exposure explains changes in temperature #Call a summary of the model summary(temp_model) The adjusted R squared value (one measure of model fit) is 0.3596. Furthermore the coefficient of our solar_exposure variable is statistically significant. 3.4 Compare the predicted values with the actual values We can use this lm function to predict values of temperature based on the level of solar exposure. We can then compare this to the actual temperature record, and see how well the model fits the data set. #Use this lm model to predict the values MEL_weather_2019 &lt;- MEL_weather_2019 %&gt;% mutate(predicted_temp=predict(temp_model,newdata=MEL_weather_2019)) #Calculate the prediction interval prediction_interval &lt;- predict(temp_model, newdata=MEL_weather_2019, interval = &quot;prediction&quot;) summary(prediction_interval) #Bind this prediction interval data back to the main set MEL_weather_2019 &lt;- cbind(MEL_weather_2019,prediction_interval) MEL_weather_2019 Model fit is easier to interpret graphically. Let’s plot the data with the model overlaid. #Plot a chart with data and model on it MEL_temp_predicted &lt;- ggplot(MEL_weather_2019)+ geom_point(aes(y=Max_temp, x=Solar_exposure), col=&quot;grey&quot;)+ geom_line(aes(y=predicted_temp,x=Solar_exposure), col=&quot;blue&quot;)+ geom_smooth(aes(y=Max_temp, x= Solar_exposure), method=lm)+ geom_line(aes(y=lwr,x=Solar_exposure), colour=&quot;red&quot;, linetype=&quot;dashed&quot;)+ geom_line(aes(y=upr,x=Solar_exposure), colour=&quot;red&quot;, linetype=&quot;dashed&quot;)+ labs(title = &quot;Does solar exposure drive temperature in Melbourne?&quot;, subtitle = &#39;Investigation using linear regression&#39;, caption = &quot;Data: Bureau of Meteorology 2020&quot;) + xlab(&quot;Solar exposure&quot;)+ ylab(&quot;Maximum temperature °C&quot;)+ scale_x_continuous(expand=c(0,0), breaks=c(0,5,10,15,20,25,30,35,40))+ theme_bw()+ theme(axis.text=element_text(size=10))+ theme(panel.grid.minor = element_blank()) MEL_temp_predicted This chart includes the model (blue line), confidence interval (grey band around the blue line), and a prediction interval (red dotted line). A prediction interval reflects the uncertainty around a single value (put simple: what is the reasonable upper and lower bound that this data point could be estimated at?). A confidence interval reflects the uncertainty around the mean prediction values (put simply: what is a reasonable upper and lower bound for the blue line at this x value?). Therefore, a prediction interval will be generally much wider than a confidence interval for the same value. 3.5 Analyse the residuals #Add the residuals to the series residuals_temp_predict &lt;- MEL_weather_2019 %&gt;% add_residuals(temp_model) Plot these residuals in a chart. residuals_temp_predict_chart &lt;- ggplot(data=residuals_temp_predict, aes(x=Solar_exposure, y=resid), col=&quot;grey&quot;)+ geom_ref_line(h=0,colour=&quot;blue&quot;, size=1)+ geom_point(col=&quot;grey&quot;)+ xlab(&quot;Solar exposure&quot;)+ ylab(&quot;Maximum temperature (°C)&quot;)+ theme_bw() + labs(title = &quot;Residual values from the linear model&quot;)+ theme(axis.text=element_text(size=12))+ scale_x_continuous(expand=c(0,0)) residuals_temp_predict_chart 3.6 Linear regression with more than one variable The linear model above is *okay*, but can we make it better? Let’s start by adding in some more variables into the linear regression. Rainfall data might assist our model in predicting temperature. Let’s add in that variable and analyse the results. temp_model_2 &lt;- lm(Max_temp ~ Solar_exposure + Rainfall, data=MEL_weather_2019) summary(temp_model_2) We can see that adding in rainfall made the model better (R squared value has increased to 0.4338). Next, we consider whether solar exposure and rainfall might be related to each other, as well as to temperature. For our third temperature model, we add an interaction variable between solar exposure and rainfall. temp_model_3 &lt;- lm(Max_temp ~ Solar_exposure + Rainfall + Solar_exposure:Rainfall, data=MEL_weather_2019) summary(temp_model_3) We now see this variable is significant, and improves the model slightly (seen by an adjusted R squared of 0.4529). 3.7 Fitting a polynomial regression When analysing the above data set, we see the issue is the sheer variance of temperatures associated with every other variable (it turns out weather forecasting is notoriously difficult). However we can expect that temperature follows a non-linear pattern throughout the year (in Australia it is hot in January-March, cold in June-August, then starts to warm up again). A linear model (e.g. a straight line) will be a very bad model for temperature — we need to introduce polynomials. For simplicity, we will introduce a new variable (Day_number) which is the day of the year (e.g. 1 January is #1, 31 December is #366). MEL_weather_2019 &lt;- MEL_weather_2019 %&gt;% mutate(Day_number=row_number()) head(MEL_weather_2019) Using the same dataset as above, let’s plot temperature in Melbourne in 2019. MEL_temp_chart &lt;- ggplot(MEL_weather_2019)+ geom_line(aes(x = Day_number, y = Max_temp)) + labs(title = &#39;Melbourne temperature profile&#39;, subtitle = &#39;Daily maximum temperature recorded in Melbourne in 2019&#39;, caption = &quot;Data: Bureau of Meteorology 2020&quot;) + xlab(&quot;Day of the year&quot;)+ ylab(&quot;Temperature&quot;)+ theme_bw() MEL_temp_chart We can see we’ll need a non-linear model to fit this data. Below we create a few different models. We start with a normal straight line model, then add an x² and x³ model. We then use these models and the ‘predict’ function to see what temperatures they forecast based on the input data. #Create a straight line estimate to fit the data poly1 &lt;- lm(Max_temp ~ poly(Day_number,1,raw=TRUE), data=MEL_weather_2019) summary(poly1) #Create a polynominal of order 2 to fit this data poly2 &lt;- lm(Max_temp ~ poly(Day_number,2,raw=TRUE), data=MEL_weather_2019) summary(poly2) #Create a polynominal of order 3 to fit this data poly3 &lt;- lm(Max_temp ~ poly(Day_number,3,raw=TRUE), data=MEL_weather_2019) summary(poly3) #Use these models to predict MEL_weather_2019 &lt;- MEL_weather_2019 %&gt;% mutate(poly1values=predict(poly1,newdata=MEL_weather_2019))%&gt;% mutate(poly2values=predict(poly2,newdata=MEL_weather_2019))%&gt;% mutate(poly3values=predict(poly3,newdata=MEL_weather_2019)) head(MEL_weather_2019) In the table above we can see the estimates for that data point from the various models. To see how well the models did graphically, we can plot the original data series with the polynominal models overlaid. #Plot a chart with all models on it MEL_weather_model_chart &lt;- ggplot(MEL_weather_2019)+ geom_line(aes(x=Day_number, y= Max_temp),col=&quot;grey&quot;)+ geom_line(aes(x=Day_number, y= poly1values),col=&quot;red&quot;) + geom_line(aes(x=Day_number, y= poly2values),col=&quot;green&quot;)+ geom_line(aes(x=Day_number, y= poly3values),col=&quot;blue&quot;)+ #Add text annotations geom_text(x=10,y=18,label=&quot;data series&quot;,col=&quot;grey&quot;,hjust=0)+ geom_text(x=10,y=16,label=&quot;linear&quot;,col=&quot;red&quot;,hjust=0)+ geom_text(x=10,y=13,label=parse(text=&quot;x^2&quot;),col=&quot;green&quot;,hjust=0)+ geom_text(x=10,y=10,label=parse(text=&quot;x^3&quot;),col=&quot;blue&quot;,hjust=0)+ labs(title = &quot;Estimating Melbourne&#39;s temperature&quot;, subtitle = &#39;Daily maximum temperature recorded in Melbourne in 2019&#39;, caption = &quot;Data: Bureau of Meteorology 2020&quot;) + xlim(0,366)+ ylim(10,45)+ scale_x_continuous(breaks= c(15,45,75,105,135,165,195,225,255,285,315,345), labels=c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;), expand=c(0,0), limits=c(0,366)) + scale_y_continuous(breaks=c(10,15,20,25,30,35,40,45)) + xlab(&quot;&quot;)+ ylab(&quot;°C&quot;)+ theme_bw()+ theme(axis.text=element_text(size=12))+ theme(panel.grid.minor = element_blank()) MEL_weather_model_chart We can see in the chart above the polynomial models do much better at fitting the data. However, they are still highly variant. Just how variant are they? We can look at the residuals to find out. The residuals is the gap between the observed data point (i.e. the grey line) and our model. #Get the residuals for poly1 residuals_poly1 &lt;- MEL_weather_2019 %&gt;% add_residuals(poly1) residuals_poly1_chart &lt;- ggplot(data=residuals_poly1,aes(x=Day_number, y=resid))+ geom_ref_line(h=0,colour=&quot;red&quot;, size=1)+ geom_line()+ xlab(&quot;&quot;)+ ylab(&quot;°C&quot;)+ theme_bw()+ theme(axis.text=element_text(size=12))+ theme(axis.ticks.x=element_blank(), axis.text.x=element_blank()) residuals_poly1_chart #Get the residuals for poly2 residuals_poly2 &lt;- MEL_weather_2019%&gt;% add_residuals(poly2) residuals_poly2_chart &lt;- ggplot(data=residuals_poly2,aes(x=Day_number, y=resid))+ geom_ref_line(h=0,colour=&quot;green&quot;, size=1)+ geom_line()+ xlab(&quot;&quot;)+ ylab(&quot;°C&quot;)+ theme_bw()+ theme(axis.text=element_text(size=12))+ theme(axis.ticks.x=element_blank(), axis.text.x=element_blank()) residuals_poly2_chart #Get the residuals for poly3 residuals_poly3 &lt;- MEL_weather_2019 %&gt;% add_residuals(poly3) residuals_poly3_chart &lt;- ggplot(data=residuals_poly3,aes(x=Day_number, y=resid))+ geom_ref_line(h=0,colour=&quot;blue&quot;, size=1)+ geom_line()+ theme_bw()+ theme(axis.text=element_text(size=12))+ scale_x_continuous(breaks= c(15,45,75,105,135,165,195,225,255,285,315,345), labels=c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;), expand=c(0,0), limits=c(0,366))+ xlab(&quot;&quot;)+ ylab(&quot;°C&quot;) residuals_poly3_chart three_charts_single_page &lt;- plot_grid( residuals_poly1_chart, residuals_poly2_chart, residuals_poly3_chart, ncol=1,nrow=3,label_size=16) three_charts_single_page As we move from a linear, to a x², to a x³ model, we see the residuals decrease in volatility. "],["working-with-raster-data-in-r.html", "Chapter 4 Working with raster data in R 4.1 Getting started 4.2 Import data 4.3 Data Wrangling 4.4 Working with raster data 4.5 Making an interactive map", " Chapter 4 Working with raster data in R Raster data (sometimes referred to as gridded data) is a type of spatial data that is stored in a grid rather than a polygon. Imagine a chessboard of individuals squares covering the Australian landmass compared to 8 different shapes covering each state and territory. The nice thing about gridded data is that all the cells in the grid are the same size - making calculations much easier. 4.1 Getting started First up we need to load some spatial and data crunching packages. #Load packages library(ncdf4) library(raster) library(rgdal) library(ggplot2) library(sp) library(rgdal) library(absmapsdata) library(dplyr) library(rasterVis) library(RColorBrewer) library(ggplot2) library(viridis) library(sf) library(plyr) library(vctrs) library(tidyr) library(tmap) library(ggmap) library(dplyr) library(ggspatial) library(rlang) library(broom) library(tidyverse) 4.2 Import data Next, we want to import annual rainfall data from github (original source available from the Bureau of Meterology) rainfall &lt;- raster(&quot;https://raw.github.com/charlescoverdale/ERF/master/rainan.txt&quot;) plot(rainfall) Straight away we see this is for the whole of Australia (and then some). We’re only interested in what’s going on in QLD… so let’s crop the data down to scale. For this we’ll need to import a shapefile for QLD. The easiest way to do this is using the absmapsdata package - importing a shapefile of Australia then filtering for only Queensland. # Import a polygon for the state of Queensland QLD_shape &lt;- state2016 %&gt;% filter(state_name_2016==&quot;Queensland&quot;) 4.3 Data Wrangling We have raster data for the entirety of Australia (and then some as it’s pulled from one of the BOMs satellites). This is a bit messy to work with - so let’s crop the rainfall data from the entire Australian continent to just Queensland. #Crop data r2 &lt;- crop(rainfall,extent(QLD_shape)) r3 &lt;- mask(r2,QLD_shape) plot(r3) Great. That looks like it worked well. Next up, let’s transform the cropped raster (i.e. gridded data) into a data frame (df) that we can use in the ggplot package. r3_df &lt;- as.data.frame(r3,xy=TRUE) r3_df &lt;- r3_df %&gt;% filter(rainan!=&quot;NA&quot;) ggplot() + geom_tile(data=r3_df, aes(x=x, y=y, fill=rainan)) + scale_fill_viridis() + coord_equal() + theme(legend.position=&quot;bottom&quot;) + theme(legend.key.width=unit(1.2, &quot;cm&quot;))+ labs(title=&quot;Rainfall in QLD&quot;, subtitle = &quot;Analysis from the Bureau of Meterology&quot;, caption = &quot;Data: BOM 2021&quot;, x=&quot;&quot;, y=&quot;&quot;, fill=&quot;(mm)&quot;) + theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ #theme(legend.position = &quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) Excellent, we’ve got a working map of rainfall in Queensland using the ggplot package. We’ll tidy up the map also and add a title and some better colours. 4.4 Working with raster data For our first piece of data analysis, we’re going to look at areas with less than 600mm of annual rainfall. How many of our data points will have less than 600mm of rain? Let’s take a look at the data distribution and find out. ggplot(r3_df) + geom_histogram(aes(rainan),binwidth=1,col=&quot;darkblue&quot;)+ labs(title=&quot;Distribution of annual rainfall in QLD&quot;, subtitle = &quot;Data using a 5x5km grid&quot;, caption = &quot;Data: Bureau of Meterology 2021&quot;, x=&quot;Rainfall (mm)&quot;, y=&quot;&quot;, fill=&quot;(mm)&quot;) + theme_minimal() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) Interesting. The data is heavily right tailed skewed (the mean will be much higher than the median)… and most of the data looks to be between 0-1000mm (this makes sense). Let’s create a ‘flag’ column of 0’s and 1’s that shows when a data point is less than 600mm. r3_df &lt;- r3_df %&gt;% mutate(flag_600mm = ifelse(rainan&lt;=600,1,0)) flagcolours&lt;-(c(&quot;grey&quot;, &quot;#2FB300&quot;)) ggplot() + geom_tile(data=r3_df, aes(x=x, y=y, fill=as.factor(flag_600mm))) + scale_fill_manual(values=flagcolours)+ coord_equal() + theme(legend.position=&quot;bottom&quot;) + theme(legend.key.width=unit(1.2, &quot;cm&quot;))+ labs(title=&quot;Areas with less than 600mm of annual rainfall in QLD&quot;, subtitle = &quot;Identifying suitable land parcels for ERF plantings&quot;, caption = &quot;Data: Bureau of Meterology 2021&quot;, x=&quot;&quot;, y=&quot;&quot;, fill=&quot;(mm)&quot;) + theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) #ggsave(&quot;C:/06 R_code/ERF_600_mm_rainfall.png&quot;,units=&quot;cm&quot;,dpi=200, device=&quot;png&quot;) 4.5 Making an interactive map The static map above is good… but an interactive visual (ideally with place names below) is better. To to this we’ll need to convert our data frame back to a raster layer, then plot it using the tmap package. # r4_df &lt;- subset(r3_df,select= -c(rainan)) # # coordinates(r4_df) &lt;- ~ x + y # gridded(r4_df) &lt;- TRUE # r5 &lt;- raster(r4_df) # # tmap_mode(&quot;view&quot;) # tm_shape(r5)+ # tm_raster(style=&quot;cont&quot;,alpha=0.5) "],["election-data-in-r.html", "Chapter 5 Election data in R 5.1 Getting started 5.2 Working with election maps 5.3 Answering election questions 5.4 Demographic analysis of voting trends 5.5 Mapping booths 5.6 Exploring booth level data 5.7 Donkeys, dicks, and other informalities 5.8 —", " Chapter 5 Election data in R Elections tend to create fascinating data sets. They are spatial in nature, comparable over time (i.e. the number of electorates roughly stays the same) - and more importantly they are consequential for all Australians. Australia’s compulsory voting system is a remarkable feature of our Federation. Every three-ish years we all turn out at over 7,000 polling booths our local schools, churches, and community centres to cast a ballot and pick up an obligatory election day sausage. The byproduct is a fascinating longitudinal and spatial data set. The following code explores different R packages, election data sets, and statistical processes aimed at exploring and modelling federal elections in Australia. One word of warning: I use the term electorates, divisions, and seats interchangeably throughout this chapter. 5.1 Getting started Let’s load up some packages #Load packages library(ggparliament) library(eechidna) library(dplyr) library(ggplot2) library(readxl) library(tidyr) library(tidyverse) library(purrr) library(knitr) library(broom) library(absmapsdata) library(sf) library(tmap) library(rmarkdown) library(bookdown) Some phenomenal Australia economists and statisticians have put together a handy election package called eechidna. It includes three main data sets for the most recent Australia federal election (2019). fp19: first preference votes for candidates at each electorate tpp19: two party preferred votes for candidates at each electorate tcp19: two candidate preferred votes for candidates at each electorate They’ve also gone to the trouble of aggregating some census data to the electorate level. This can be found with the abs2016 function. data(fp19) data(tpp19) data(tcp19) data(abs2016) # Show the first few rows #head(tpp16) %&gt;% kable(&quot;simple&quot;) #head(tcp16) %&gt;% kable(&quot;simple&quot;) DT::datatable(tpp19) DT::datatable(tcp19) 5.2 Working with election maps As noted in the introduction, elections are spatial in nature. Not only does geography largely determine policy decisions, we see that many electorates vote for the same party (or even the same candidate) for decades. How electorate boundaries are drawn is a long story (see here, here, and here). The summary version is the AEC carves up the population by state and territory, uses a wacky formula to decide how many seats each state and territory should be allocated, then draws maps to try and get a roughly equal number of people in each electorate. Oh… and did I mention for reasons that aren’t worth explaining that Tasmania has to have at least 5 seats? Our Federation is a funny thing. Anyhow, at time of writing this is how the breakdown of seats looks. State/Territory Number of members of the House of Representatives New South Wales 47 Victoria 39 Queensland 30 Western Australia 15 South Australia 10 Tasmania 5 Australian Capital Territory 3 Northern Territory 2* TOTAL 151 Note: The NT doesn’t have the population to justify it’s second seat . The AEC scheduled to dissolve it after the 2019 election but Parliament intervened in late 2020 and a bill was passed to make sure both seats were kept (creating 151 nationally). How variant are these 151 electorates in size? Massive. Durack in Western Australia (1.63 million square kilometres) is by far the largest and the smallest is Grayndler in New South Wales (32 square kilometres). Let’s make a map to make things easier. CED_map &lt;- ced2018 %&gt;% ggplot()+ geom_sf()+ labs(title=&quot;Electoral divisions in Australia&quot;, subtitle = &quot;It turns out we divide the country in very non-standard blocks&quot;, caption = &quot;Data: Australian Bureau of Statistics 2016&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;right&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) CED_map_remove_6 &lt;- ced2018 %&gt;% dplyr::filter(!ced_code_2018 %in% c(506,701,404,511,321,317)) %&gt;% ggplot()+ geom_sf()+ labs(title=&quot;194 electoral divisions in Australia&quot;, subtitle = &quot;Turns out removing the largest 6 electorates makes a difference&quot;, caption = &quot;Data: Australian Bureau of Statistics 2016&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;right&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8)) CED_map CED_map_remove_6 Next let’s look at what party/candidate is currently the sitting member for each electorate. To do this on a map we’re going to need to join our tcp19 data and the ced2018 spatial data. In the first data set, the electorate column in called ‘DivisionNm’ and in the second ‘ced_name_2018.’ We see the data in our DivisionNm variable is in UPPERCASE while our ced_name_2018 variable is in Titlecase. Let’s change the first variable to Titlecase. We can then make the column names the same, and run our left_join function. #Pull in the electorate shapefiles from the absmapsdata package electorates &lt;- ced2018 #Make the DivisionNm Titlecase tcp19$DivisionNm=str_to_title(tcp19$DivisionNm) tcp19_edit &lt;- tcp19 %&gt;% distinct() %&gt;% filter(Elected == &quot;Y&quot;) #Make the column names the same electorates &lt;- dplyr::rename(electorates, DivisionNm = ced_name_2018) ced_map_data &lt;- left_join(tcp19_edit, electorates, by = &quot;DivisionNm&quot;) ced_map_data &lt;- as.data.frame(ced_map_data) head(ced_map_data) str(ced_map_data) ggplot()+ geom_sf(data=ced_map_data,aes(geometry = geometry,fill=PartyAb)) + theme_minimal() + theme(axis.ticks.x = element_blank(),axis.text.x = element_blank())+ theme(axis.ticks.y = element_blank(),axis.text.y = element_blank())+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ theme(legend.position = &quot;right&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ scale_color_manual(&quot;PartyAb&quot;, values=c(&quot;LP&quot; =&quot;#80b1d3&quot;, &quot;NP&quot; = &quot;#006400&quot;, &quot;ALP&quot;= &quot;#fb8072&quot;, &quot;GVIC&quot; = &quot;#33a02c&quot;, &quot;XEN&quot; = &quot;#beaed4&quot;, &quot;ON&quot; = &quot;#fdc086&quot;, &quot;KAP&quot; = &quot;#ffff99&quot;, &quot;IND&quot; = &quot;grey25&quot;)) 5.3 Answering election questions Let’s start by answering a simple question: who won the election? For this we’ll need to use the two-candidate preferred data set (to make sure we capture all the minor parties that won seats). who_won &lt;- tcp19 %&gt;% filter(Elected == &quot;Y&quot;) %&gt;% group_by(PartyNm) %&gt;% tally() %&gt;% arrange(desc(n)) # inspect who_won %&gt;% kable(&quot;simple&quot;) PartyNm n AUSTRALIAN LABOR PARTY 68 LIBERAL PARTY 67 NATIONAL PARTY 10 INDEPENDENT 3 CENTRE ALLIANCE 1 KATTER’S AUSTRALIAN PARTY (KAP) 1 THE GREENS 1 Next up let’s see which candidates won with the smallest percentage of votes who_won_least_votes_prop &lt;- fp16 %&gt;% filter(Elected == &quot;Y&quot;) %&gt;% arrange(Percent) %&gt;% mutate(candidate_full_name = paste0(GivenNm, &quot; &quot;, Surname, &quot; (&quot;, CandidateID, &quot;)&quot;)) %&gt;% dplyr::select(candidate_full_name, PartyNm, DivisionNm, Percent) who_won_least_votes_prop %&gt;% head %&gt;% kable(&quot;simple&quot;) candidate_full_name PartyNm DivisionNm Percent MICHAEL DANBY (28267) AUSTRALIAN LABOR PARTY MELBOURNE PORTS 27.00 CATHY O’TOOLE (28997) AUSTRALIAN LABOR PARTY HERBERT 30.45 JUSTINE ELLIOT (28987) AUSTRALIAN LABOR PARTY RICHMOND 31.05 TERRI BUTLER (28921) AUSTRALIAN LABOR PARTY GRIFFITH 33.18 STEVE GEORGANAS (29071) AUSTRALIAN LABOR PARTY HINDMARSH 34.02 CATHY MCGOWAN (23288) INDEPENDENT INDI 34.76 This is really something. The relationship we’re seeing here seems to be these are the seats in which the ALP relies heavily on preference flows from the Greens or Independents to win. The electorate I grew up in is listed here (Richmond) - let’s look at how the votes were allocated. Richmond_fp &lt;- fp16 %&gt;% filter(DivisionNm == &quot;RICHMOND&quot;) %&gt;% arrange(-Percent) %&gt;% mutate(candidate_full_name = paste0(GivenNm, &quot; &quot;, Surname, &quot; (&quot;, CandidateID, &quot;)&quot;)) %&gt;% dplyr::select(candidate_full_name, PartyNm, DivisionNm, Percent, OrdinaryVotes) Richmond_fp %&gt;% knitr::kable(&quot;simple&quot;) candidate_full_name PartyNm DivisionNm Percent OrdinaryVotes MATTHEW FRASER (29295) NATIONAL PARTY RICHMOND 37.61 37006 JUSTINE ELLIOT (28987) AUSTRALIAN LABOR PARTY RICHMOND 31.05 30551 DAWN WALKER (28783) THE GREENS RICHMOND 20.44 20108 NEIL GORDON SMITH (28349) ONE NATION RICHMOND 6.26 6160 ANGELA POLLARD (29290) ANIMAL JUSTICE PARTY RICHMOND 3.14 3089 RUSSELL KILARNEY (28785) CHRISTIAN DEMOCRATIC PARTY RICHMOND 1.51 1484 Sure enough - the Greens certainly helped get the ALP across the line. The interpretation that these seats are the most marginal is incorrect (e.g. imagine if ALP win 30% and the Greens win 30% - that is a pretty safe 10% margin assuming traditional preference flows). But - let’s investigate which seats are the most marginal. who_won_smallest_margin &lt;- tcp16 %&gt;% filter(Elected == &quot;Y&quot;) %&gt;% mutate(percent_margin = 2*(Percent - 50), vote_margin = round(percent_margin * OrdinaryVotes / Percent)) %&gt;% arrange(Percent) %&gt;% mutate(candidate_full_name = paste0(GivenNm, &quot; &quot;, Surname, &quot; (&quot;, CandidateID, &quot;)&quot;)) %&gt;% dplyr::select(candidate_full_name, PartyNm, DivisionNm, Percent, OrdinaryVotes, percent_margin, vote_margin) # have a look who_won_smallest_margin %&gt;% head %&gt;% knitr::kable(&quot;simple&quot;) candidate_full_name PartyNm DivisionNm Percent OrdinaryVotes percent_margin vote_margin CATHY O’TOOLE (28997) AUSTRALIAN LABOR PARTY HERBERT 50.02 44187 0.04 35 STEVE GEORGANAS (29071) AUSTRALIAN LABOR PARTY HINDMARSH 50.58 49586 1.16 1137 MICHELLE LANDRY (28034) LIBERAL PARTY CAPRICORNIA 50.63 44633 1.26 1111 BERT VAN MANEN (28039) LIBERAL PARTY FORDE 50.63 42486 1.26 1057 ANNE ALY (28727) AUSTRALIAN LABOR PARTY COWAN 50.68 41301 1.36 1108 ANN SUDMALIS (28668) LIBERAL PARTY GILMORE 50.73 52336 1.46 1506 Crikey. We see Cathy O’Toole got in with a 0.04% margin (just 35 votes!) While we’re at it we better do the opposite and see who romped it by the largest margin. who_won_largest_margin &lt;- tcp16 %&gt;% filter(Elected == &quot;Y&quot;) %&gt;% mutate(percent_margin = 2*(Percent - 50), vote_margin = round(percent_margin * OrdinaryVotes / Percent)) %&gt;% arrange(desc(Percent)) %&gt;% mutate(candidate_full_name = paste0(GivenNm, &quot; &quot;, Surname, &quot; (&quot;, CandidateID, &quot;)&quot;)) %&gt;% dplyr::select(candidate_full_name, PartyNm, DivisionNm, Percent, OrdinaryVotes, percent_margin, vote_margin) # Look at the data who_won_largest_margin %&gt;% head %&gt;% knitr::kable(&quot;simple&quot;) candidate_full_name PartyNm DivisionNm Percent OrdinaryVotes percent_margin vote_margin ANDREW BROAD (28415) NATIONAL PARTY MALLEE 71.32 62383 42.64 37297 PAUL FLETCHER (28565) LIBERAL PARTY BRADFIELD 71.04 66513 42.08 39398 JULIE BISHOP (28746) LIBERAL PARTY CURTIN 70.70 60631 41.40 35504 SUSSAN LEY (28699) LIBERAL PARTY FARRER 70.53 68114 41.06 39653 JASON CLARE (28931) AUSTRALIAN LABOR PARTY BLAXLAND 69.48 55507 38.96 31125 BRENDAN O’CONNOR (28274) AUSTRALIAN LABOR PARTY GORTON 69.45 68135 38.90 38163 Wowza. That’s really something. Some candidates won seats with a 30-40 percent margin - scooping up 70% of the two candidate preferred vote in the process! who_won &lt;- tcp16 %&gt;% filter(Elected == &quot;Y&quot;) %&gt;% group_by(PartyNm, StateAb) %&gt;% tally() %&gt;% arrange(desc(n)) who_won_by_state &lt;- spread(who_won,StateAb, n) %&gt;% arrange(desc(NSW)) #View data set who_won_by_state %&gt;% knitr::kable(&quot;simple&quot;) 5.4 Demographic analysis of voting trends Now we’ve figured out how to work with election data - let’s link it up to some AUstralian demographic data. The eechidna package includes a cleaned set of census data from 2016 that has already been adjusted from ASGS boundaries to Commonwealth Electoral Divisions. # Import the census data from the eechidna package data(eechidna::abs2016) head(abs2016) # Join with two-party preferred voting data data(tpp10) election2016 &lt;- left_join(abs2016, tpp10, by = &quot;DivisionNm&quot;) That’s what we want to see. 150 rows of data (one for each electorate) and over 80 columns of census variables. A starting exploratory exercise is too see which of these variables are correlated with voting for one party or another. There’s some old narrative around LNP voters being rich, old, white, and somehow ‘upper class’ compared to the population at large. Let’s pick a few variables that roughly match with this criteria (Income, Age, English language speakers, and Bachelor educated) and chart it compared to LNP percentage of the vote. # See relationship between personal income and Liberal/National support ggplot(election2016, aes(x = MedianPersonalIncome, y = LNP_Percent)) + geom_point() + geom_smooth() ggplot(election2016, aes(x = MedianAge, y = LNP_Percent)) + geom_jitter() + geom_smooth() ggplot(election2016, aes(x = EnglishOnly, y = LNP_Percent)) + geom_jitter() + geom_smooth() ggplot(election2016, aes(x = BachelorAbv, y = LNP_Percent)) + geom_jitter() + geom_smooth() First impressions: Geez this data looks messy. Second impression: Maybe there’s a bit of a trend with age and income? Let’s build a regression model to run all the 80 odd census variables in the abs2016 data set against the LNP_percent variable. # We can use colnames(election2016) to get a big list of all the variables available # Now we build the model election_model &lt;- lm(LNP_Percent~ Population+ Area+ Age00_04+ Age05_14+ Age15_19+ Age20_24+ Age25_34+ Age35_44+ Age45_54+ Age55_64+ Age65_74+ Age75_84+ Age85plus+ Anglican+ AusCitizen+ AverageHouseholdSize+ BachelorAbv+Born_Asia+ Born_MidEast+Born_SE_Europe+ Born_UK+ BornElsewhere+ Buddhism+ Catholic+ Christianity+ Couple_NoChild_House+Couple_WChild_House+ CurrentlyStudying+DeFacto+ DiffAddress+ DipCert+ EnglishOnly+ FamilyRatio+ Finance+ HighSchool+ Indigenous+ InternetAccess+ InternetUse+ Islam+ Judaism+ Laborer+ LFParticipation+ Married+ MedianAge+ MedianFamilyIncome+ MedianHouseholdIncome+ MedianLoanPay+ MedianPersonalIncome+ MedianRent+ Mortgage+ NoReligion+ OneParent_House+ Owned+ Professional+ PublicHousing+ Renting+ SocialServ+ SP_House+ Tradesperson+ Unemployed+ Volunteer, data=election2016) summary(election_model) ## ## Call: ## lm(formula = LNP_Percent ~ Population + Area + Age00_04 + Age05_14 + ## Age15_19 + Age20_24 + Age25_34 + Age35_44 + Age45_54 + Age55_64 + ## Age65_74 + Age75_84 + Age85plus + Anglican + AusCitizen + ## AverageHouseholdSize + BachelorAbv + Born_Asia + Born_MidEast + ## Born_SE_Europe + Born_UK + BornElsewhere + Buddhism + Catholic + ## Christianity + Couple_NoChild_House + Couple_WChild_House + ## CurrentlyStudying + DeFacto + DiffAddress + DipCert + EnglishOnly + ## FamilyRatio + Finance + HighSchool + Indigenous + InternetAccess + ## InternetUse + Islam + Judaism + Laborer + LFParticipation + ## Married + MedianAge + MedianFamilyIncome + MedianHouseholdIncome + ## MedianLoanPay + MedianPersonalIncome + MedianRent + Mortgage + ## NoReligion + OneParent_House + Owned + Professional + PublicHousing + ## Renting + SocialServ + SP_House + Tradesperson + Unemployed + ## Volunteer, data = election2016) ## ## Residuals: ## Min 1Q Median 3Q Max ## -8.6197 -2.5288 -0.2903 2.2118 10.0752 ## ## Coefficients: (1 not defined because of singularities) ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -7.602e+03 1.198e+04 -0.634 0.52753 ## Population 4.224e-05 5.045e-05 0.837 0.40468 ## Area 6.359e-06 5.436e-06 1.170 0.24527 ## Age00_04 7.063e+01 1.193e+02 0.592 0.55554 ## Age05_14 7.280e+01 1.194e+02 0.609 0.54380 ## Age15_19 7.215e+01 1.193e+02 0.605 0.54686 ## Age20_24 6.383e+01 1.198e+02 0.533 0.59559 ## Age25_34 7.265e+01 1.196e+02 0.607 0.54522 ## Age35_44 6.830e+01 1.195e+02 0.572 0.56912 ## Age45_54 6.964e+01 1.196e+02 0.582 0.56192 ## Age55_64 7.224e+01 1.194e+02 0.605 0.54677 ## Age65_74 7.915e+01 1.197e+02 0.661 0.51017 ## Age75_84 7.583e+01 1.193e+02 0.635 0.52682 ## Age85plus 6.974e+01 1.197e+02 0.582 0.56178 ## Anglican 2.912e-01 3.954e-01 0.737 0.46338 ## AusCitizen 1.679e-01 7.769e-01 0.216 0.82938 ## AverageHouseholdSize -2.683e+01 1.673e+01 -1.604 0.11241 ## BachelorAbv -3.045e+00 1.003e+00 -3.035 0.00318 ** ## Born_Asia -3.451e-01 3.842e-01 -0.898 0.37151 ## Born_MidEast 8.345e-01 1.256e+00 0.664 0.50832 ## Born_SE_Europe -2.007e+00 1.479e+00 -1.357 0.17825 ## Born_UK 6.477e-02 4.615e-01 0.140 0.88872 ## BornElsewhere 6.542e-01 6.265e-01 1.044 0.29933 ## Buddhism 6.375e-01 8.253e-01 0.772 0.44196 ## Catholic -3.970e-01 3.754e-01 -1.058 0.29322 ## Christianity 1.112e+00 6.283e-01 1.769 0.08038 . ## Couple_NoChild_House 3.345e+00 3.078e+00 1.087 0.28021 ## Couple_WChild_House 3.762e+00 3.156e+00 1.192 0.23661 ## CurrentlyStudying 2.597e+00 1.303e+00 1.993 0.04939 * ## DeFacto -7.035e+00 2.617e+00 -2.688 0.00862 ** ## DiffAddress 9.320e-01 3.877e-01 2.404 0.01836 * ## DipCert -8.790e-01 7.296e-01 -1.205 0.23163 ## EnglishOnly -1.316e-01 4.717e-01 -0.279 0.78095 ## FamilyRatio 1.962e+01 4.994e+01 0.393 0.69543 ## Finance 1.528e+00 9.060e-01 1.687 0.09523 . ## HighSchool 9.371e-01 4.683e-01 2.001 0.04854 * ## Indigenous 1.054e+00 4.781e-01 2.205 0.03013 * ## InternetAccess -9.364e-01 9.367e-01 -1.000 0.32028 ## InternetUse NA NA NA NA ## Islam 2.894e-01 6.407e-01 0.452 0.65258 ## Judaism 7.306e-01 7.474e-01 0.978 0.33105 ## Laborer -2.925e-02 7.905e-01 -0.037 0.97057 ## LFParticipation 2.926e+00 8.800e-01 3.325 0.00130 ** ## Married -4.168e+00 1.890e+00 -2.205 0.03011 * ## MedianAge -7.214e-01 1.071e+00 -0.674 0.50218 ## MedianFamilyIncome 2.146e-02 3.339e-02 0.643 0.52204 ## MedianHouseholdIncome 2.879e-02 3.037e-02 0.948 0.34584 ## MedianLoanPay -9.533e-03 1.336e-02 -0.713 0.47757 ## MedianPersonalIncome -2.286e-02 5.907e-02 -0.387 0.69973 ## MedianRent -4.070e-02 5.306e-02 -0.767 0.44514 ## Mortgage 1.923e+00 1.741e+00 1.104 0.27264 ## NoReligion 1.285e+00 6.365e-01 2.019 0.04658 * ## OneParent_House 2.164e-01 2.987e+00 0.072 0.94241 ## Owned 1.488e+00 1.591e+00 0.935 0.35229 ## Professional 7.449e-01 1.010e+00 0.737 0.46300 ## PublicHousing -5.464e-01 6.280e-01 -0.870 0.38670 ## Renting 2.068e+00 1.736e+00 1.192 0.23664 ## SocialServ -3.356e-01 6.232e-01 -0.539 0.59155 ## SP_House -1.034e+00 8.907e-01 -1.161 0.24895 ## Tradesperson 6.347e-01 8.058e-01 0.788 0.43305 ## Unemployed 2.815e-01 1.176e+00 0.239 0.81149 ## Volunteer 7.346e-01 6.179e-01 1.189 0.23772 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.933 on 86 degrees of freedom ## (3 observations deleted due to missingness) ## Multiple R-squared: 0.8911, Adjusted R-squared: 0.8151 ## F-statistic: 11.73 on 60 and 86 DF, p-value: &lt; 2.2e-16 For the people that care about statistical fit and endogenous variables, you may have concerns (and rightly so) with the above approach. It’s pretty rough. Let’s run a basic check to see if the residuals are normally distributed. hist(election_model$residuals, col=&quot;bisque&quot;, freq=FALSE, main=NA) lines(density(election_model$residuals), col=&quot;red&quot;) Hmm… that’s actually not too bad. Onwards. We see now that only a handful of these variables in the table above are statistically significant. Running an updated (and leaner) model gives: election_model_lean &lt;- lm(LNP_Percent~ BachelorAbv+ CurrentlyStudying+ DeFacto+ DiffAddress+ Finance+HighSchool+ Indigenous+ LFParticipation+ Married+ NoReligion, data=election2016) summary(election_model_lean) ggplot(election2016, aes(x = BachelorAbv, y = LNP_Percent)) + geom_point() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = CurrentlyStudying, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = DeFacto, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = DiffAddress, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = Finance, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = HighSchool, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = Indigenous, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = LFParticipation, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = Married, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() ggplot(election2016, aes(x = NoReligion, y = LNP_Percent)) + geom_jitter() + geom_smooth()+theme_bw() My main gripe with the above is that electorates are very different in size. Therefore trying to conclude any statistical relationship on an electorate level is prone to errors. Adding more data isn’t always the best method to solve what’s formally known as the Modifiable Area Unit Problem… but in this case it’s worth a try. So here goes, let’s run the analysis above, this time using all 7,000 voting booths (and their local demographic data) as the data set rather than just the 150 electorates. 5.5 Mapping booths The AEC maintains a handy spreadsheet of booth locations for recent federal elections. You can search for your local booth location (probably a school, church, or community center) in the table below. What do these booths look like on a map? Let’s reuse the CED map above and plot a point for each booth location. ggplot() + geom_sf(data = ced2018) + geom_point(data = booths, aes(x = Longitude, y = Latitude), colour = &quot;purple&quot;, size = 1, alpha = 0.3, inherit.aes = FALSE) + labs(title = &quot;Polling booths in Australia&quot;, subtitle = &quot; &quot;, caption = &quot;Data: Australian Electoral Comission 2016&quot;, x = &quot;&quot;, y = &quot;&quot;) + theme_minimal() + theme(axis.ticks.x = element_blank(), axis.text.x = element_blank()) + theme(axis.ticks.y = element_blank(), axis.text.y = element_blank()) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.position = &quot;right&quot;) + theme(plot.title = element_text(face = &quot;bold&quot;, size = 12)) + theme(plot.subtitle = element_text(size = 11)) + theme(plot.caption = element_text(size = 8)) + xlim(c(112, 157)) + ylim(c(-44, -11)) 5.6 Exploring booth level data Figuring out where a candidates votes come from within an electorate is fundamental to developing a campaign strategy. Even in small electorates (e.g. Wentworth), there are pockets of right leaning and left leaning districts. Once you factor in preference flows - this multi-variate calculus becomes important to winning or maintaining a seat. In the eechidnapackage, election results are provided at the resolution of polling place. They nmust be downloaded using the functions firstpref_pollingbooth_download, twoparty_pollingbooth_download or twocand_pollingbooth_download (depending on the vote type). The two files need to be merged to be useful for analysis.. Both have a unique ID for the polling place that can be used to match the records. The two party preferred vote, a measure of preference between only the Australian Labor Party (ALP) and the Liberal/National Coalition (LNP), is downloaded using twoparty_pollingbooth_download. The preferred party is the one with the higher percentage, and we use this to colour the points indicating polling places. We see that within some big rural electorates (e.g. in Western NSW), there are pockets of ALP preference despite the seat going to the LNP. Note that this data set is on a tpp basis - so we can’t see the booths that were won by minor parties (although it would be fascinating). ## Error: `map` must have the columns `x`, `y`, and `id` The two candidate preferred vote (downloaded with twocand_pollingbooth_download) is a measure of preference between the two candidates who received the most votes through the division of preferences, where the winner has the higher percentage. ## Error: `map` must have the columns `x`, `y`, and `id` 5.7 Donkeys, dicks, and other informalities We’re about to go off the deep end into a certain type of election data. In the 2016 Australian Federal Election, over 720,915 people (5.5% of all votes cast) voted informally. Of these, over half (377,585) had ‘no clear first preference,’ meaning their vote did not contribute to the campaign of any candidate. I’ll be honest, informal votes absolutely fascinate me. Not only are there 8 types of informal votes (you can read all about the Australian Electoral Commission’s analysis here), but the rate of informal voting varies a tremendous amount by electorate. Broadly, we can think of informal votes in two main buckets. Protest votes Stuff-ups If we want to get particular about it, I like to subcategorise these buckets into: Protest votes (i.e. a person that thinks they are voting against): the democratic system, their local selection of candidates on the ballot, or the two most likely candidates for PM. Stuff ups (people who): filled in the form wrong but a clear preference was still made stuffed up the form entirely and it didn’t contribute towards the tally for any candidtate This is the good bit: The AEC works tirelessly to reduce stuff-ups on ballot papers (clear instructions and UI etc), but there isn’t much of a solution for protest votes. What’s interesting is you can track the ‘vibe’ of how consequential an election is by the proportion of protest votes. Let’s pull some informal voting data from the AEC website. 5.8 — "],["charts.html", "Chapter 6 Charts 6.1 Getting started 6.2 Make the data tidy 6.3 Line plot 6.4 Scatter and trend plot 6.5 Shading areas on plots 6.6 Bar chart (numercial) 6.7 Stacked bar chart 6.8 Histogram 6.9 Ridge chart 6.10 BBC style: Bar charts (categorical) 6.11 BBC style: Dumbbell charts 6.12 Facet wraps 6.13 Pie chart 6.14 Patchwork 6.15 Saving to powerpoint 6.16 Automating chart creation", " Chapter 6 Charts 6.1 Getting started There’s exceptional resources online for using the ggplot2 package to create production ready charts. The R Graph Gallery is a great place to start, as is the visual storytelling blogs of The Economist and the BBC. This chapter contains the code for some of my most used charts and visualization techniques. # Load in packages library(ggridges) library(ggplot2) library(ggrepel) library(viridis) library(readxl) library(hrbrthemes) library(dplyr) library(stringr) library(reshape) library(tidyr) library(lubridate) library(gapminder) library(grattantheme) library(ggalt) library(purrr) library(scales) library(purrr) #library(bbplot) 6.2 Make the data tidy Before making a chart ensure the data is “tidy” - meaning there is a new row for every changed variable. It also doesn’t hurt to remove NA’s for consistency (particularly in time series). #Read in data url &lt;-&quot;https://raw.githubusercontent.com/charlescoverdale/ggridges/master/2019_MEL_max_temp_daily.xlsx&quot; #Read in with read.xlsx MEL_temp_daily &lt;- openxlsx::read.xlsx(url) #Remove last 2 characters to just be left with the day number MEL_temp_daily$Day=substr(MEL_temp_daily$Day,1,nchar(MEL_temp_daily$Day)-2) #Make a wide format long using the gather function MEL_temp_daily &lt;- MEL_temp_daily %&gt;% gather(Month,Temp,Jan:Dec) MEL_temp_daily$Month&lt;-factor(MEL_temp_daily$Month,levels=c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;)) #Add in a year MEL_temp_daily[&quot;Year&quot;]=2019 #Reorder MEL_temp_daily &lt;- MEL_temp_daily[,c(1,2,4,3)] #Make a single data field using lubridate MEL_temp_daily &lt;- MEL_temp_daily %&gt;% mutate(Date = make_date(Year, Month, Day)) #Drop the original date columns MEL_temp_daily &lt;- MEL_temp_daily %&gt;% dplyr::select(Date, Temp) %&gt;% drop_na() #Add on a 7-day rolling average MEL_temp_daily &lt;- MEL_temp_daily %&gt;% dplyr::mutate(Seven_day_rolling = zoo::rollmean(Temp, k = 7, fill = NA), Mean = mean(Temp)) #Drop NA&#39;s #MEL_temp_daily &lt;- MEL_temp_daily %&gt;% drop_na() 6.3 Line plot plot_MEL_temp &lt;- ggplot(MEL_temp_daily)+ geom_line(aes(x = Date, y = Temp), col = &quot;blue&quot;)+ geom_line(aes(x = Date, y = Mean), col = &quot;orange&quot;)+ labs(title=&quot;Hot in the summer and cool in the winter&quot;, subtitle = &quot;Analysing temperature in Melbourne&quot;, caption = &quot;Data: Bureau of Meterology 2019&quot;, x=&quot;&quot;, y=&quot;&quot;) + scale_x_date(date_breaks = &quot;1 month&quot;, date_labels = &quot;%b&quot;, limits = as.Date(c(&#39;2019-01-01&#39;,&#39;2019-12-14&#39;)))+ scale_y_continuous(label = unit_format(unit=&quot;\\u00b0C&quot;, sep=&quot;&quot;)) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = margin(l = 20, r = -20)))+ theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4))+ annotate(geom=&#39;curve&#39;, x=as.Date(&#39;2019-08-01&#39;), y=23, xend=as.Date(&#39;2019-08-01&#39;),yend=17, curvature=-0.5,arrow=arrow(length=unit(2,&quot;mm&quot;)))+ annotate(geom=&#39;text&#39;,x=as.Date(&#39;2019-07-15&#39;),y=25, label=&quot;Below 20°C all winter&quot;) plot_MEL_temp 6.4 Scatter and trend plot MEL_temp_Jan &lt;- MEL_temp_daily %&gt;% filter(MEL_temp_daily$Date&lt;as.Date(&quot;2019-01-31&quot;)) ggplot(MEL_temp_Jan)+ geom_point(aes(x = Date, y = Temp), col = &quot;purple&quot;,alpha=0.4)+ geom_smooth(aes(x = Date, y = Temp), col = &quot;purple&quot;,fill=&quot;purple&quot;, alpha=0.1,method = &quot;lm&quot;)+ #scale_colour_manual(values = c(&quot;purple&quot;),labels=&quot;Trend&quot;) + #scale_fill_manual(values = c(&quot;purple&quot;),labels=&quot;Confidence interval&quot;)+ labs(title=&quot;January is a hot one&quot;, subtitle = &quot;Analysing temperature in Melbourne&quot;, caption = &quot;Data: Bureau of Meterology 2019&quot;, x=&quot;&quot;, y=&quot;Temperature °C&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%d-%b&quot;, limits = as.Date(c(&#39;2019-01-01&#39;,&#39;2019-01-31&#39;)), expand = c(0,0)) + theme_minimal() + theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(axis.title.y = element_text(size=9,margin=margin(t = 0, r = 10, b = 0, l = 0)))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4))+ geom_hline(yintercept=45,colour =&quot;black&quot;,size=0.4) + annotate(geom=&#39;curve&#39;, x=as.Date(&#39;2019-01-22&#39;), y=37.5, xend=as.Date(&#39;2019-01-25&#39;),yend=42, curvature=0.5, col=&quot;#575757&quot;, arrow=arrow(length=unit(2,&quot;mm&quot;))) + annotate(geom=&#39;text&#39;,x=as.Date(&#39;2019-01-16&#39;),y=37.5, label=&quot;January saw some extreme temperatures&quot;,size=3.2,col=&quot;#575757&quot;) 6.5 Shading areas on plots Adding shading behind a plot area is simple using geom_rect. Adding shading under a particular model line? A little trickier. See both example below. #Example 1 #Set a custom limit for the y-axis threshold threshold &lt;- 20 ggplot() + geom_point(data = mtcars, aes(x = hp, y = mpg)) + #Add an intercept line geom_hline(yintercept = threshold) + # Shade area under y_lim geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = threshold), alpha = 1/5, fill = &quot;blue&quot;) + # Shade area above y_lim geom_rect(aes(xmin = -Inf, xmax = Inf, ymin = threshold, ymax = Inf), alpha = 1/5, fill = &quot;red&quot;) #Example 2 #Now to add colour either way of a model line #Define the model model &lt;- lm(mpg ~ log(hp), data = mtcars) # Get the predictions for plotting. Here, df_line, is a data frame with new # coordinates that will be used for plotting the trend line and further for # building the polygons for shading. min_x &lt;- min(mtcars$hp) max_x &lt;- max(mtcars$hp) df_line &lt;- data.frame(hp = seq(from = min_x, to = max_x, by = 1)) df_line$mpg &lt;- predict(model, newdata = df_line) p &lt;- ggplot() + geom_point(data = mtcars, aes(x = hp, y = mpg),color=&quot;grey&quot;,alpha=0.5) + geom_line(data = df_line, aes(x = hp, y = mpg),col=&quot;black&quot;) #Define two polygons (one above, and one below the line) df_poly_under &lt;- df_line %&gt;% tibble::add_row(hp = c(max_x, min_x), mpg = c(-Inf, -Inf)) df_poly_above &lt;- df_line %&gt;% tibble::add_row(hp = c(max_x, min_x), mpg = c(Inf, Inf)) #Plot the data, line, and the shades above and below the line p + geom_polygon(data = df_poly_under, aes(x = hp, y = mpg), fill = &quot;blue&quot;, alpha = 1/5) + geom_polygon(data = df_poly_above, aes(x = hp, y = mpg), fill = &quot;red&quot;, alpha = 1/5)+ scale_x_discrete(expand = c(0,0))+ theme_minimal() + labs(title=&quot;Look at that snazzy red/blue shaded area&quot;, subtitle = &quot;Subtitle goes here&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())+ theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank()) 6.6 Bar chart (numercial) Year = c(&quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;) Value = (c(1000000,3000000, 2000000, 5000000)) bar_data_single &lt;- (cbind(Year, Value)) bar_data_single &lt;- as.data.frame(bar_data_single) bar_data_single$Value = as.integer(bar_data_single$Value) ggplot(bar_data_single, aes(x = Year, y = Value, label=Value)) + geom_bar(stat=&#39;identity&#39;,fill=&quot;blue&quot;,width=0.8)+ geom_text(size = 5, col=&quot;white&quot;,fontface=&quot;bold&quot;, position = position_stack(vjust = 0.5), label=scales::dollar(Value,scale=1/1e6,suffix=&quot;m&quot;))+ labs(title=&quot;Bar chart example&quot;, subtitle = &quot;Subtitle goes here&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=12))+ theme(axis.text=element_text(size=12))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank())+ theme(panel.grid.major.y = element_blank()) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) # ggsave(plot=last_plot(), # width=10, # height=10, # units=&quot;cm&quot;, # dpi = 600, # filename = &quot;/Users/charlescoverdale/Desktop/test.png&quot;) 6.7 Stacked bar chart Year = c(&quot;2019&quot;, &quot;2019&quot;, &quot;2019&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2020&quot;, &quot;2020&quot;, &quot;2020&quot;) Quarter = c(&quot;Q1&quot;,&quot;Q2&quot;,&quot;Q3&quot;, &quot;Q4&quot;,&quot;Q1&quot;,&quot;Q2&quot;,&quot;Q3&quot;, &quot;Q4&quot;) Value = (c(100,300,200,500,400,700,200,300)) bar_data &lt;- (cbind(Year, Quarter, Value)) bar_data &lt;- as.data.frame(bar_data) bar_data$Value = as.integer(bar_data$Value) bar_data_totals &lt;- bar_data %&gt;% dplyr::group_by(Year) %&gt;% dplyr:: summarise(Total = sum(Value)) ggplot(bar_data, aes(x = Year, y = Value, fill = (Quarter), label=Value)) + geom_bar(position = position_stack(reverse=TRUE),stat=&#39;identity&#39;)+ geom_text(size = 4, col=&quot;white&quot;, fontface=&quot;bold&quot;, position = position_stack(reverse=TRUE,vjust = 0.5), label=scales::dollar(Value))+ geom_text(aes(Year, Total, label=scales::dollar(Total), fill = NULL, vjust=-0.5), fontface=&quot;bold&quot;, size=4, data = bar_data_totals)+ scale_fill_brewer(palette = &quot;Blues&quot;) + labs(title=&quot;Bar chart example&quot;, subtitle = &quot;Subtitle goes here&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;Units&quot;) + theme_minimal() + theme(legend.position = &quot;bottom&quot;)+ theme(legend.title = element_blank())+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=10))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=10))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank())+ theme(panel.grid.major.y = element_blank()) + scale_y_continuous(expand=c(0,0),limits=c(0,1800))+ theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) 6.8 Histogram Aka. a bar chart for a continuous variable where the bars are touching. Useful to show distribution of time series or ordinal variables. c(&quot;0-20&quot;, &quot;20-40&quot;, &quot;40-60&quot;, &quot;60-80&quot;, &quot;80+&quot;) ## [1] &quot;0-20&quot; &quot;20-40&quot; &quot;40-60&quot; &quot;60-80&quot; &quot;80+&quot; #Create a data set hist_data &lt;- data.frame(X1=sample(0:100,100,rep=TRUE)) ggplot(hist_data)+ geom_histogram(aes(x=X1),binwidth=5,fill=&quot;blue&quot;,alpha=0.5) + geom_vline(xintercept=c(50,75,95),yintercept=0,linetype=&quot;longdash&quot;,col=&quot;orange&quot;) + labs(title=&quot;Histogram example&quot;, subtitle = &quot;Facet wraps are looking good&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.subtitle = element_text(margin=margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) 6.9 Ridge chart Handy when working with climate variables. Particularly useful at showing the difference in range of multiples series (e.g. temperature by month). # Import data url &lt;-&quot;https://raw.githubusercontent.com/charlescoverdale/ggridges/master/2019_MEL_max_temp_daily.xlsx&quot; MEL_temp_daily &lt;- openxlsx::read.xlsx(url) # Remove last 2 characters to just be left with the day number MEL_temp_daily$Day=substr(MEL_temp_daily$Day,1,nchar(MEL_temp_daily$Day)-2) # Make a wide format long using the gather function MEL_temp_daily &lt;- MEL_temp_daily %&gt;% gather(Month,Temp,Jan:Dec) MEL_temp_daily$Month&lt;-factor(MEL_temp_daily$Month,levels=c(&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;)) # Plot ggplot(MEL_temp_daily, aes(x = Temp, y = Month, fill = stat(x))) + geom_density_ridges_gradient(scale =2, size=0.3, rel_min_height = 0.01, gradient_lwd = 1.) + scale_y_discrete(limits = unique(rev(MEL_temp_daily$Month)))+ scale_fill_viridis_c(name = &quot;°C&quot;, option = &quot;C&quot;) + labs(title = &#39;Melbourne temperature profile&#39;, subtitle = &#39;Daily maximum temperature recorded in Melbourne in 2019&#39;, caption = &quot;Data: Bureau of Meteorology 2020&quot;) + xlab(&quot; &quot;)+ ylab(&quot; &quot;)+ theme_ridges(font_size = 13, grid = TRUE) 6.10 BBC style: Bar charts (categorical) # #Prepare data # bar_df &lt;- gapminder %&gt;% # filter(year == 2007 &amp; continent == &quot;Africa&quot;) %&gt;% # arrange(desc(lifeExp)) %&gt;% # head(5) # # #Make plot # bars &lt;- ggplot(bar_df, aes(x = country, y = lifeExp)) + # geom_bar(stat=&quot;identity&quot;, # position=&quot;identity&quot;, # fill=ifelse(bar_df$country == &quot;Mauritius&quot;, &quot;#1380A1&quot;, &quot;#dddddd&quot;)) + # geom_hline(yintercept = 0, size = 1, colour=&quot;#333333&quot;) + # bbc_style() + # labs(title=&quot;Reunion is highest&quot;, # subtitle = &quot;Highest African life expectancy, 2007&quot;) # # bars &lt;- bars + coord_flip() # bars &lt;- bars + coord_flip() + # theme(panel.grid.major.x = element_line(color=&quot;#cbcbcb&quot;), # panel.grid.major.y=element_blank()) # bars &lt;- bars + scale_y_continuous(limits=c(0,85), # breaks = seq(0, 80, by = 20), # labels = c(&quot;0&quot;,&quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80 years&quot;)) # # labelled.bars &lt;- bars + # geom_label(aes(x = country, y = lifeExp, label = round(lifeExp, 0)), # hjust = 1, # vjust = 0.5, # colour = &quot;white&quot;, # fill = NA, # label.size = NA, # family=&quot;Helvetica&quot;, # size = 6) # # labelled.bars 6.11 BBC style: Dumbbell charts Dumbbell charts are handy instead of using clustered column charts with janky thinkcell labels and arrows to show the difference between the columns. Note it relies on having a 4 variable input (variable_name, value1, value2, and gap). The geom_dumbellfunction lives inside the ggalt package rather than the standard ggplot2. # #Prepare data # dumbbell_df &lt;- gapminder %&gt;% # filter(year == 1967 | year == 2007) %&gt;% # select(country, year, lifeExp) %&gt;% # spread(year, lifeExp) %&gt;% # mutate(gap = `2007` - `1967`) %&gt;% # arrange(desc(gap)) %&gt;% # head(10) # # #Make plot # ggplot(dumbbell_df, aes(x = `1967`, xend = `2007`, y = reorder(country, gap), group = country)) + geom_dumbbell(colour = &quot;#dddddd&quot;, # size = 3, # colour_x = &quot;#FAAB18&quot;, # colour_xend = &quot;#1380A1&quot;) + # bbc_style() + # labs(title=&quot;We&#39;re living longer&quot;, # subtitle=&quot;Biggest life expectancy rise, 1967-2007&quot;) 6.12 Facet wraps Handy rather than showing multiple lines on the same chart. Top tips: facet_wrap()dataframes need to be in long form in order to be manipulated easily. It also helps to add on separate columns for the start and end values (if you want to add data point labels). #Create a data set Year = c(&quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;) QLD = (c(500,300, 500, 600)) NSW = (c(200,400, 500, 700)) VIC = (c(300,400, 500, 600)) #Combine the columns into a single dataframe facet_data &lt;- (cbind(Year, QLD,NSW,VIC)) facet_data &lt;- as.data.frame(facet_data) #Change formats to integers facet_data$QLD = as.integer(facet_data$QLD) facet_data$NSW = as.integer(facet_data$NSW) facet_data$VIC = as.integer(facet_data$VIC) #Make the wide data long facet_data_long &lt;- pivot_longer(facet_data,!Year, names_to=&quot;State&quot;, values_to=&quot;Value&quot;) facet_data_long &lt;- facet_data_long %&gt;% dplyr::mutate(start_label = if_else(Year == min(Year), as.integer(Value), NA_integer_)) facet_data_long &lt;- facet_data_long %&gt;% dplyr::mutate(end_label = if_else(Year == max(Year), as.integer(Value), NA_integer_)) #Make the base line chart base_chart &lt;- ggplot() + geom_line(data=facet_data_long, aes(x = Year, y = Value, group = State, colour = State)) + geom_point(data=facet_data_long, aes(x = Year, y = Value, group = State, colour = State)) + ggrepel::geom_text_repel(data=facet_data_long, aes(x = Year, y = Value, label = end_label), color = &quot;black&quot;, nudge_y = -10,size=3) + ggrepel::geom_text_repel(data=facet_data_long, aes(x = Year, y = Value, label = start_label), color = &quot;black&quot;, nudge_y = 10,size=3) base_chart + scale_x_discrete( breaks = seq(2018, 2021, 1), labels = c(&quot;2018&quot;, &quot;19&quot;, &quot;20&quot;, &quot;21&quot;))+ facet_wrap(State ~ .) + #To control the grid arrangement, we can add in customer dimensions #ncol = 2, nrow=2) + labs(title=&quot;State by state comparison&quot;, subtitle = &quot;Facet wraps are looking good&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(strip.text.x = element_text(size = 9, face = &quot;bold&quot;)) + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.subtitle = element_text(margin=margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) 6.13 Pie chart These should be used sparingly… but they are handy for showing proportions when the proportion of the whole is paramount (e.g. 45%) - rather than the proportion in relation to another data point (e.g. 16% one year vs 18% the next). # Create Data pie_data &lt;- data.frame( group=LETTERS[1:5], value=c(13,7,9,21,2)) # Compute the position of labels pie_data &lt;- pie_data %&gt;% arrange(desc(group)) %&gt;% mutate(proportion = value / sum(pie_data$value) *100) %&gt;% mutate(ypos = cumsum(proportion)- 0.5*proportion ) # Basic piechart ggplot(pie_data, aes(x=&quot;&quot;, y=proportion, fill=group)) + geom_bar(stat=&quot;identity&quot;)+ coord_polar(&quot;y&quot;, start=0) + theme_void()+ geom_text(aes(y = ypos, label = paste(round(proportion,digits=0),&quot;%&quot;, sep = &quot;&quot;),x=1.25), color = &quot;white&quot;, size=4) + scale_fill_brewer(palette=&quot;Set1&quot;)+ labs(title=&quot;Use pie charts sparingly&quot;, subtitle = &quot;Subtitle goes here&quot;, caption = &quot;&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme(legend.position = &quot;bottom&quot;)+ theme(legend.title = element_blank())+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(plot.subtitle = element_text(margin=margin(0,0,5,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) # ggsave(plot=last_plot(), # width=10, # height=10, # units=&quot;cm&quot;, # dpi = 600, # filename = &quot;/Users/charlescoverdale/Desktop/pietest.png&quot;) 6.14 Patchwork Patchwork is a nifty package for arranging plots and other graphic elements (text, tables etc) in different grid arrangements. The basic syntax is to use plot1 | plot2 for side by side charts, and plot1 / plot2for top and bottom charts. You can also combine these two functions for a grid of different size columns (e.g. plot3 / (plot1 | plot2) #Make some simply plots using the mtcars package p1 &lt;- ggplot(mtcars) + geom_point(aes(mpg, disp)) + ggtitle(&#39;Plot 1&#39;) p2 &lt;- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) + ggtitle(&#39;Plot 2&#39;) #Example of side by side charts p1 + p2 #Add in a table next to the plot p1 + gridExtra::tableGrob(mtcars[1:10, c(&#39;mpg&#39;, &#39;disp&#39;)]) 6.15 Saving to powerpoint There’s a bunch of ways to save ggplot graphics - but the way I find most useful is by exporting to pptx in a common ‘charts’ directory. If you want to save as a png you can use the normal ggsave function - however it will not be editable (e.g. able to click and drag to rescale for a presentation). Therefore instead we can use the grattantheme package to easily save to an editable pptx graphic. Note: The code below has been commented out so that is will upload to bookdown.org without an error. #The classic save function to png # ggsave(plot = ggplot2::last_plot(), # width = 8, # height = 12, # dpi = 600, # filename = &quot;/Users/charlescoverdale/Desktop/test.png&quot;) #Using the grattantheme package to easily safe to powerpoint # grattan_save_pptx(p = ggplot2::last_plot(), # &quot;/Users/charlescoverdale/Desktop/test.pptx&quot;, # type = &quot;wholecolumn&quot;) 6.16 Automating chart creation Let’s say we have a dataframe of multiple variables. We want to produce simple charts of the same style for each variable (including formatting and titles etc). Sure we can change the aes(x=)and aes(y=) variables in ggplot2 manually for each column - but this is time intensive especially for large data frames. Instead, we can write a function that will loop through the whole dataframe and produce the same format of chart. #Create a data set Year = c(&quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;) Variable1 = (c(500,300, 200, 400)) Variable2 = (c(200,400, 200, 700)) Variable3 = (c(300,500, 800, 1000)) #Combine the columns into a single dataframe bar_data_multiple &lt;- (cbind(Year, Variable1, Variable2, Variable3)) bar_data_multiple &lt;- as.data.frame(bar_data_multiple) #Change formats to integers bar_data_multiple$Variable1 = as.integer(bar_data_multiple$Variable1) bar_data_multiple$Variable2 = as.integer(bar_data_multiple$Variable2) bar_data_multiple$Variable3 = as.integer(bar_data_multiple$Variable3) #Define a function loop &lt;- function(chart_variable) { ggplot(bar_data_multiple, aes(x = Year, y = .data[[chart_variable]], label = .data[[chart_variable]]))+ geom_bar(stat=&#39;identity&#39;,fill=&quot;blue&quot;)+ geom_text(aes( label = scales::dollar(.data[[chart_variable]])), size = 5, col=&quot;white&quot;, fontface=&quot;bold&quot;, position = position_stack(vjust = 0.5))+ labs(title=paste(&quot;Company X: &quot;, chart_variable, &quot; (&quot;,head(Year,n=1), &quot; - &quot;, tail(Year,n=1), &quot;)&quot;, sep=&quot;&quot;), subtitle = &quot;Subtitle goes here&quot;, caption = &quot;Data: Made up from scratch&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=12))+ theme(axis.text=element_text(size=12))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank())+ theme(panel.grid.major.y = element_blank()) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) } plots &lt;- purrr::map(colnames(bar_data_multiple)[colnames(bar_data_multiple) != &quot;Year&quot;], loop) plots #cowplot::plot_grid(plotlist = plots) "],["machine-learning.html", "Chapter 7 Machine Learning 7.1 Background 7.2 Beyond regressions 7.3 Classification models using Caret 7.4 Build a classification model 7.5 Compare different ML models 7.6 Building a predictive ML model 7.7 —", " Chapter 7 Machine Learning 7.1 Background There probably isn’t a hotter term this decade than ‘machine learning.’ But the principles of getting machines to be able to perform an operation based on an unknown input has been around for the best part of 100 years. ‘Figure it out’ is now an instruction you can tell a computer… and sure enough with some careful programming (and a truckload of data to conduct trial and error experiments on) - we can get pretty close. I used these handy resources when writing this guide: The Caret Package - Max Kuhn Caret Package - Selva Prabhakaran Multivariate Adaptive Regression Splines We’ll start our journey by loading some packages # Load in packages library(ggplot2) library(caret) library(skimr) library(RANN) library(randomForest) library(fastAdaboost) library(gbm) library(xgboost) library(caretEnsemble) library(C50) library(earth) library(skimr) library(cumSeg) library(caTools) 7.2 Beyond regressions We know that a model is just any function (of one or more variables) that helps to explain observations. The most basic models to explain a data set are mean, min, and max. These functions don’t rely on any variables outside of the variable of interest itself. Moving to the slightly more abstract, we recall that a linear regression fits a straight line through a data set that minimizes the variance (i.e. the errors) between each point and the model line. To fit a linear regression, we use the lm() function in the following format: linear_model &lt;- lm(y ~ x, dataset) To make predictions using mod on the original data, we can call the predict() function: predict_data &lt;- predict(linear_model, dataset) # Let&#39;s use the mtcars dataset as an example # Fit a model to the mtcars data data(mtcars) # Build a linear model to explain mpg using hp mtcars_model &lt;- lm(mpg ~ hp, mtcars) # Run the model over the data mtcars_model_estimates &lt;- predict(mtcars_model,mtcars) # Bind the original figures for mpg with the predicted figures for mpg mtcars_model_outputs &lt;- cbind(Actual_mpg=mtcars$mpg, Actual_hp=mtcars$hp, Predicted_mpg=mtcars_model_estimates, Residuals=resid(mtcars_model), Fitted=fitted(mtcars_model)) # Ensure the outputs are a df mtcars_model_outputs &lt;- as.data.frame(mtcars_model_outputs) We can see how well this model estimated the dataset by looking at the residuals on a plot. ggplot(mtcars_model_outputs)+ geom_line(aes(x = Actual_hp, y = Predicted_mpg), col = &quot;blue&quot;)+ geom_point(aes(x = Actual_hp, y = Actual_mpg), col = &quot;blue&quot;, alpha=0.5)+ geom_segment(aes(x = Actual_hp, y = Actual_mpg, xend = Actual_hp, yend = Fitted),col=&quot;black&quot;,alpha=0.8, linetype=&quot;dotted&quot;)+ labs(title=&quot;Building a regression model&quot;, subtitle = &quot;Higher horsepower cars get less miles to the gallon&quot;, caption = &quot;Data: mtcars dataset&quot;, x=&quot;Horsepower&quot;, y=&quot;Miles per gallon&quot;) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) To quantify the model fit in a single number, we can use the Root Mean Square Error (RMSE). # Calculate Root Mean Square Error (RMSE) manually error &lt;- mtcars_model_estimates - mtcars[[&quot;mpg&quot;]] mtcars_rmse &lt;- sqrt(mean(error ^ 2)) # We can also simply use the residuals that are plotted on the chart above sqrt(mean(mtcars_model_outputs$Residuals^ 2)) So in very rough terms, we can say that the model predicts miles per gallon for a given level of horsepower with around 4 mpg of error. 7.3 Classification models using Caret I quickly stumbled upon the caret package when delving into ML in R. Used for Classification And REgression Training (how clever), it’s a bit of a one-stop shop for all machine learning functionality. In this worked example, we’ll work through how to estimate a binary variable (which of two brands of orange juice a customer purchased) based on some retail and demographic data. The original data set is called OJ: Orange Juice Data from Introduction to Statistical Learning in R (1998). Let’s take a look at the set # Import dataset orange &lt;- read.csv(&#39;https://raw.githubusercontent.com/selva86/datasets/master/orange_juice_withmissing.csv&#39;) # Structure of the dataframe str(orange) # Have a look head(orange[, 1:10]) First things first - we need to split our data into ‘train’ and ‘test’ sets. Why? Well We want to have a model where we can input an x value into an algorithm and it will know the value for y. If we give our model every x and y couplet at the start - there will be no data to ‘test’ the model on, since it will already be incorporating those the ‘test’ data relationships into the model itself. It’s a bit like getting the answer sheet to the exam as you’re walking in - the exam result it probably going to be a little biased. # Set the seed so R knows how to randomise set.seed(100) # Step 1: Get row numbers for the training data trainRowNumbers &lt;- caret::createDataPartition(orange$Purchase, p=0.8, list=FALSE) # Step 2: Create the training dataset trainData &lt;- orange[trainRowNumbers,] # Step 3: Create the test dataset testData &lt;- orange[-trainRowNumbers,] # Store X and Y for later use. # X are our predictor variables, Y is out prediction variable. x = trainData[, 2:18] y = trainData$Purchase Alas we don’t live in a perfect world, and there’s going to be missing data in our set. Luckily, caret actually has a way of guessing the middle values (a machine learning application itself). Strictly speaking, filling in missing data before running a ML application is called ‘data snooping’ because we’re applying already modeled data to a model. It’s not best practice, and a more robust approach would be to get a large enough data set that you can just remove the rows containing any NA’s. Regardless, here’s how to use ‘k nearest number’ estimates to fill in gaps in data sets. # Check what data is missing using the skmir package skimmed &lt;- skimr::skim(trainData) skimmed # Create the knn imputation model on the training data preProcess_missingdata_model &lt;- caret::preProcess(trainData, method=&#39;knnImpute&#39;) preProcess_missingdata_model # Use the imputation model to predict the values of missing data points trainData &lt;- predict(preProcess_missingdata_model, newdata = trainData) anyNA(trainData) One more pesky data thing - categorical variables don’t sit well with ML algorithms. It’s much better to have tidy-ish columns with binary (0 and 1) flags as to whether a variable is true or false. There’s a simple way of converting categorical to dummy variables in R using the dummyVars function. # Creating dummy variables is converting a categorical variable to as many binary variables as here are categories. dummies_model &lt;- caret::dummyVars(Purchase ~ ., data=trainData) # Create the dummy variables using predict. The Y variable (Purchase) will not be present in trainData_mat. trainData_mat &lt;- predict(dummies_model, newdata = trainData) # # Convert to dataframe trainData &lt;- data.frame(trainData_mat) # # See the structure of the new dataset str(trainData) There’s a bunch of numeric variables here that are hard to algorithms to work with - as it’s the relative levels between the numbers that really matters. To solve for this issue, let’s convert all numbers to a scale between zero and 1. The caret package has a nice function called preProcess to do this. preProcess_range_model &lt;- preProcess(trainData, method=&#39;range&#39;) trainData &lt;- predict(preProcess_range_model, newdata = trainData) # Append the Y variable trainData$Purchase &lt;- y apply(trainData[, 1:10], 2, FUN=function(x){c(&#39;min&#39;=min(x), &#39;max&#39;=max(x))}) Great! Now all our variables are between 0 and 1 in size. 7.4 Build a classification model Let’s start building our model. We’ll kick off with a multivariate adaptive regression splines (MARS) model which due to reasons not worth explaining is included in the earth R package. Let’s run the model on the trainData set - and also use the varImp to see what variables the model found most important in predicting the variable Purchase. # Set the seed for reproducibility set.seed(100) # Train the model using randomForest and predict on the training data itself. model_mars = train(Purchase ~ ., data=trainData, method=&#39;earth&#39;) fitted &lt;- predict(model_mars) model_mars plot(model_mars, main=&quot;Model Accuracies with MARS&quot;) varimp_mars &lt;- varImp(model_mars) plot(varimp_mars, main=&quot;Variable Importance with MARS&quot;) Looks good! Now we’ll see how well the model does with test data # Step 1: Impute missing values testData2 &lt;- predict(preProcess_missingdata_model, testData) # Step 2: Create one-hot encodings (dummy variables) testData3 &lt;- predict(dummies_model, testData2) # Step 3: Transform the features to range between 0 and 1 testData4 &lt;- predict(preProcess_range_model, testData3) # View head(testData4[, 1:10]) # Predict on testData predicted &lt;- predict(model_mars, testData4) head(predicted) #Change the data type to a factor testData$Purchase &lt;- as.factor(testData$Purchase) # Compute the confusion matrix confusionMatrix(reference = testData$Purchase, data = predicted, mode=&#39;everything&#39;, positive=&#39;MM&#39;) We see in the confusion matrix that the MARS model got the prediction correct around 80% of the time. 7.5 Compare different ML models MARS isn’t the only ML model we can use in R - there’s a bunch of useful approaches. Let’s run a few. We’ll start with adaboost set.seed(100) # Train the model using adaboost model_adaboost = train(Purchase ~ ., data=trainData, method=&#39;adaboost&#39;, tuneLength=2) model_adaboost Now let’s try random forest set.seed(100) # Train the model using rf model_rf = train(Purchase ~ ., data=trainData, method=&#39;rf&#39;, tuneLength=5) model_rf And we can compare how all these models faired compared to one another # Compare model performances using resample() models_compare &lt;- resamples(list(ADABOOST=model_adaboost, RF=model_rf, MARS=model_mars)) # Summary of the models performances summary(models_compare) bwplot(models_compare, layout = c(3, 1)) MARS seems to win out here - with the highest median and max accuracy. 7.6 Building a predictive ML model ROC curve is a really useful shortcut for summarizing the performance of a classifier over all possible thresholds. This saves you a lot of tedious work computing class predictions for many different thresholds and examining the confusion matrix for each. My favorite package for computing ROC curves is caTools, which contains a function called colAUC(). This function is very user-friendly and can actually calculate ROC curves for multiple predictors at once. # Make ROC curve #colAUC(predicted, testData4, plotROC = TRUE) The ROC curve is a very useful, single-number summary of a model’s ability to discriminate the positive from the negative class (e.g. mines from rocks). An AUC of 0.5 is no better than random guessing, an AUC of 1.0 is a perfectly predictive model, and an AUC of 0.0 is perfectly anti-predictive (which rarely happens). This is often a much more useful metric than simply ranking models by their accuracy at a set threshold, as different models might require different calibration steps (looking at a confusion matrix at each step) to find the optimal classification threshold for that model. 7.7 — "],["hypothesis-testing.html", "Chapter 8 Hypothesis testing 8.1 A quick refresher 8.2 T-testing our first hypothesis 8.3 Tailed tests 8.4 Correlation (and working with normal distributions) 8.5 Confidence intervals (mean) 8.6 Confidence intervals (model)", " Chapter 8 Hypothesis testing 8.1 A quick refresher Hypothesis testing is a way of validating if a claim about a population (e.g. a data set) is correct. Getting data on a whole population (e.g. everyone in Australia) is hard - so to validate a hypothesis, we use random samples from a population instead. The language when dealing with hypothesis testing is purposefully janky. When looking at the outputs of our hypothesis test, we consider p-values. Note: There’s lots wrong with p-values that we won’t bother getting into right now. The long story short is if you make your null hypothesis ultra specific and only report when your p-value on your millionth iteration of a test is below 0.05… bad science is likely to get published and cited. What we need to know: A small p-value (typically ≤ 0.05) indicates strong evidence against the null hypothesis, so we reject it. A large p-value (&gt; 0.05) indicates weak evidence against the null hypothesis, so you fail to reject it. Let’s load in some packages and get started. # Load in packages library(ggridges) library(ggplot2) library(forecast) library(ggrepel) library(viridis) library(readxl) library(hrbrthemes) library(dplyr) library(stringr) library(reshape) library(tidyr) library(lubridate) library(gapminder) library(grattantheme) library(ggalt) library(purrr) library(scales) library(purrr) library(aTSA) library(readrba) 8.2 T-testing our first hypothesis We’ll start simple. Let’s create a random dataset - with the caveat that it will be normally distributed. By default the rnorm function will generate a dataset that has a mean of 0 and a standard deviation of 1. set.seed(40) dataset1 &lt;- data.frame(variable1=rnorm(1000,mean=0,sd=1)) ggplot()+ geom_histogram(aes(x=dataset1$variable1,y=..density..),binwidth=0.1,fill=&quot;blue&quot;,alpha=0.5) + stat_function(fun = dnorm, args = list(mean = mean(dataset1$variable1), sd = sd(dataset1$variable1)))+ geom_hline(yintercept = 0) + geom_vline(xintercept = 0, linetype=&quot;dotted&quot;,alpha=0.5)+ labs(title=&quot;Histogram for t-testing&quot;, caption = &quot;Data: Made from rnorm(1000)&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + scale_x_continuous(breaks = seq(-3, 3, by = 1))+ theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) We know by default that the mean of dataset1 will be approximately zero… but let’s check anyway. # Find the mean of dataset1 mean(dataset1$variable1) Great, now let’s run our first hypothesis test. We’ll use the t.test function. This is in the format of t.test(data, null_hypothesis). So quite simply, we can test the null hypothesis that the mean for dataset1$variable1 is 5). # Hypothesis test t.test(dataset1$variable1, mu = 5) We see the p-value here is tiny, meaning we reject the null hypothesis. That is to say, the mean for dataset1$variable1 is not 5. Going further, let’s test the hypothesis that the mean is 0.01. # Hypothesis test t.test(dataset1$variable1, mu = -0.03, alternative=&quot;greater&quot;) We see here the p-value is greater than 0.05, leading us to fail to reject the null hypothesis. In a sentence, we cannot say that the mean of dataset1$variable1 is different to 0.01. 8.3 Tailed tests In the previous level we were cheating slightly, in that we didn’t specify the ‘tail’ for the test, or our confidence level. By default the t.test function assumes tests are two tailed, and the desired confidence level is 0.95 (i.e. 95%). However, in some cases we might want to have a hypothesis that says one variable is greater than or less than another variable (rather than just different from each other). This is where we use tails. # Hypothesis test t.test(dataset1$variable1, mu = 0.03, alternative = &quot;greater&quot;) 8.4 Correlation (and working with normal distributions) A correlation coefficient measures the direction and strength of the correlation between two variables. The tricky thing is - if variables aren’t normally distributed, none of our correlation theory works very well. In the example below, we see that miles per gallon is correlated with horsepower. It’s a negative relationship, meaning the more horsepower in a car, the less miles per gallon the car exhibits. ggplot(mtcars)+ geom_point(aes(x = hp, y = mpg), col = &quot;blue&quot;, alpha=0.5)+ geom_smooth(aes(x = hp, y = mpg),method=&#39;lm&#39;)+ labs(title=&quot;Building a regression model&quot;, subtitle = &quot;Higher horsepower cars get less miles to the gallon&quot;, caption = &quot;Data: mtcars dataset&quot;, x=&quot;Horsepower&quot;, y=&quot;Miles per gallon&quot;) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) We can use the cor.test to tell us the correlation coefficient and the p-value of the correlation. We specify the method as ‘pearson’ for the Pearson correlation coefficient. But we remember this method only works well if both our variables are normally distributed. That’s worth checking - let’s plot a histogram for both hp and mpg. cor.test(mtcars$hp, mtcars$mpg, method=&quot;pearson&quot;) ggplot()+ geom_histogram(aes(x=mtcars$mpg,y=..density..),fill=&quot;blue&quot;,alpha=0.5) + stat_function(fun = dnorm, args = list(mean = mean(mtcars$mpg), sd = sd(mtcars$mpg)))+ geom_hline(yintercept = 0) + geom_vline(xintercept = mean(mtcars$mpg), linetype=&quot;dotted&quot;,alpha=0.5)+ labs(title=&quot;Histogram of mtcars$mpg&quot;, caption = &quot;Data: Made from mtcars&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) ggplot()+ geom_histogram(aes(x=mtcars$hp,y=..density..),fill=&quot;blue&quot;,alpha=0.5) + stat_function(fun = dnorm, args = list(mean = mean(mtcars$hp), sd = sd(mtcars$hp)))+ geom_hline(yintercept = 0) + geom_vline(xintercept = mean(mtcars$hp), linetype=&quot;dotted&quot;,alpha=0.5)+ labs(title=&quot;Histogram of mtcars$hp&quot;, caption = &quot;Data: Made from mtcars&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) Crikey… they don’t look very normal at all. Let’s plot QQ plots of our variables and see what’s going on. ggplot(mtcars, aes(sample = mpg)) + geom_qq()+ geom_qq_line()+ labs(title=&quot;QQ plot of mtcars$mpg&quot;, caption = &quot;Data: Made from mtcars&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) ggplot(mtcars, aes(sample = hp)) + geom_qq()+ geom_qq_line()+ labs(title=&quot;QQ plot of mtcars$hp&quot;, caption = &quot;Data: Made from mtcars&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) Hmm okay, both series are a bit all over the shop. Let’s do a statistical test to confirm. The Shapiro-Wilk’s method is widely used for normality testing. The null hypothesis of this tests is that the sample distribution is normal. If the test is significant, the distribution is non-normal. shapiro.test(mtcars$mpg) shapiro.test(mtcars$hp) 8.5 Confidence intervals (mean) Firstly, we can calculate the confidence interval on a single variable. Essentially this measures the variance of the normal distribution, and gives us an idea of how ‘clustered’ the values are to the mean. There are roughly 4 steps to do this: Calculate the mean Calculate the standard error of the mean Find the t-score that corresponds to the confidence level Calculate the margin of error and construct the confidence interval mpg.mean &lt;- mean(mtcars$mpg) print(mpg.mean) mpg.n &lt;- length(mtcars$mpg) mpg.sd &lt;- sd(mtcars$mpg) mpg.se &lt;- mpg.sd/sqrt(mpg.n) print(mpg.se) alpha = 0.05 degrees.freedom = mpg.n - 1 t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F) print(t.score) mpg.error &lt;- t.score * mpg.se lower.bound &lt;- mpg.mean - mpg.error upper.bound &lt;- mpg.mean + mpg.error print(c(lower.bound,upper.bound)) For the lazy folks among us - there’s also this quick and dirty way of doing it. # Calculate the mean and standard error mpg.model &lt;- lm(mpg ~ 1, mtcars) # Calculate the confidence interval confint(mpg.model, level=0.95) Great. Let’s plot this interval on the distribution. ggplot()+ geom_histogram(aes(x=mtcars$mpg,y=..density..),binwidth=2,fill=&quot;blue&quot;,alpha=0.5) + stat_function(fun = dnorm, args = list(mean = mean(mtcars$mpg), sd = sd(mtcars$mpg)))+ geom_hline(yintercept = 0) + geom_vline(xintercept = mean(mtcars$mpg), linetype=&quot;dotted&quot;,alpha=0.5)+ geom_vline(xintercept = lower.bound,col=&quot;purple&quot;)+ geom_vline(xintercept = upper.bound, col=&quot;purple&quot;)+ labs(title=&quot;Histogram of mtcars$mpg&quot;, caption = &quot;Data: Made from mtcars&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) Two things we note here: First, the distribution doesn’t look that normal. Second, geez that 95% confidence interval looks narrow as a result. Let’s do the same analysis with an actual normal distribution and see what happens. set.seed(404) dataset2 &lt;- data.frame(variable1=rnorm(1000,mean=0,sd=1)) df2.mean &lt;- mean(dataset2$variable1) print(df2.mean) df2.n &lt;- length(dataset2$variable1) df2.sd &lt;- sd(dataset2$variable1) df2.se &lt;- mpg.sd/sqrt(mpg.n) print(df2.se) alpha = 0.05 degrees.freedom = df2.n - 1 t.score = qt(p=alpha/2, df=degrees.freedom,lower.tail=F) print(t.score) df2.error &lt;- t.score * df2.se lower.bound.df2 &lt;- df2.mean - df2.error upper.bound.df2 &lt;- df2.mean + df2.error print(c(lower.bound.df2,upper.bound.df2)) #Make a function to colour the tails upper_tail &lt;- function(x) { y &lt;- dnorm(x,mean=0,sd=1) y[x &lt; upper.bound.df2 | x &gt; 1000] &lt;- NA return(y) } lower_tail &lt;- function(x) { y &lt;- dnorm(x,mean=0,sd=1) y[x &lt; -1000 | x &gt; lower.bound.df2] &lt;- NA return(y) } #Plot the distributions ggplot()+ geom_histogram(aes(x=dataset2$variable1,y=..density..),binwidth=0.1,fill=&quot;blue&quot;,alpha=0.5) + stat_function(fun = dnorm, args = list(mean = mean(dataset2$variable1), sd = sd(dataset2$variable1)))+ geom_hline(yintercept = 0) + geom_vline(xintercept = mean(dataset2$variable1), linetype=&quot;dotted&quot;,alpha=0.5)+ geom_vline(xintercept = lower.bound.df2,col=&quot;purple&quot;)+ geom_vline(xintercept = upper.bound.df2, col=&quot;purple&quot;)+ stat_function(fun = upper_tail, geom = &quot;area&quot;, fill = &quot;grey&quot;,col=&quot;grey&quot;, alpha = 0.8) + stat_function(fun = lower_tail, geom = &quot;area&quot;, fill = &quot;grey&quot;,col=&quot;grey&quot;, alpha = 0.8) + labs(title=&quot;95% confidence interval&quot;, caption = &quot;Data: Made from rnorm(1000)&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + scale_x_continuous(breaks = seq(-3, 3, by = 1))+ theme(panel.spacing.x = unit(10, &quot;mm&quot;))+ theme(legend.position=&quot;none&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=9))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(plot.title = element_text(margin=ggplot2::margin(0,0,15,0))) + theme(plot.margin=unit(c(0.5,0.5,0.5,0.5),&quot;cm&quot;)) Great - we’ve got a more sensible looking plot, and greyed out the tails where our confidence interval excludes. We expect out observation to fall somewhere between the two purple lines (or more exactly between -2.1 and 2.1) 8.6 Confidence intervals (model) Secondly, we can calculate the confidence internal around a linear model. Somewhat similar to above, this process shows us how confident we can be about any single point in the linear estimate (e.g. if it has an enormous confidence interval attached to it… the linear estimate of the value at that point is probably a bit dodgy). mtcars.lm &lt;- lm(mpg ~ hp, data = mtcars) summary(mtcars.lm) predict(mtcars.lm, newdata = mtcars, interval = &#39;confidence&#39;) It’s great to have the raw data - but there’s an even easier way of plotting the confidence interval on a chart: we use the geom_smooth()function. The syntax in this example is: geom_smooth(aes(x = hp, y = mpg), method='lm', level=0.95) ggplot(mtcars)+ geom_point(aes(x = hp, y = mpg), col = &quot;blue&quot;, alpha=0.5)+ geom_smooth(aes(x = hp, y = mpg),method=&#39;lm&#39;,level=0.95)+ labs(title=&quot;Building a regression model&quot;, subtitle = &quot;Higher horsepower cars get less miles to the gallon&quot;, caption = &quot;Data: mtcars dataset&quot;, x=&quot;Horsepower&quot;, y=&quot;Miles per gallon&quot;) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) For a sanity check, let’s crank up the confidence level to 0.999 (meaning our interval should capture just about all the observations). We see the confidence interval band increases… but not by that much. Why? Well remember how the data isn’t a very good normal distribution? That means the confidence interval function won’t be super accurate - especially at the extremes. "],["forecasting.html", "Chapter 9 Forecasting 9.1 Background 9.2 ARIMA models", " Chapter 9 Forecasting 9.1 Background So we’ve got a time series dataset… but what is a reasonable forecast for how it might behave in the future? Sure we can do a confidence interval (as we learned in the previous chapter) - but what about forecasting for multiple periods into the future. That’s where we need to build some models. # Load in packages library(ggridges) library(ggplot2) library(forecast) library(ggrepel) library(viridis) library(readxl) library(hrbrthemes) library(dplyr) library(stringr) library(reshape) library(tidyr) library(lubridate) library(gapminder) library(grattantheme) library(ggalt) library(purrr) library(scales) library(purrr) library(aTSA) library(readrba) We’ll start with some pre-loaded time series data. The ggplot2 includes a data set called ‘economics’ that contains US economic indicators from the 1960’s to 2015. econ_data &lt;- economics %&gt;% dplyr::select(c(&quot;date&quot;, &quot;uempmed&quot;)) econ_data &lt;- econ_data %&gt;% dplyr::filter((date &gt;= as.Date(&quot;1970-01-01&quot;) &amp; date &lt;= as.Date(&quot;1999-12-31&quot;))) As a side note: We can also get Australian unemployment rate data using the readrba function. aus_unemp_rate &lt;- read_rba(series_id = &quot;GLFSURSA&quot;) head(aus_unemp_rate) Let’s plot the data to see what we are working with. ggplot(econ_data)+ geom_point(aes(x = date, y = uempmed), col = &quot;grey&quot;, alpha=0.5)+ geom_smooth(aes(x = date, y = uempmed), col = &quot;blue&quot;)+ labs(title=&quot;Unemployment rate&quot;, caption = &quot;Data: ggplot2::economics&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.title = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) 9.2 ARIMA models AutoRegressive Integrated Moving Average (ARIMA) models are a handy tool to have in the toolbox. An auto regressive model is one where Yt depends on its own lags. A moving average (MA only) model is one where Yt depends only on the lagged forecast errors. We combine these together (technically we integrate them) and get ARIMA. First order of business, we may need to ‘difference’ our series to make it stationary. Let’s check if it is stationary using the augmented Dickey-Fuller test. The null hypothesis assumes that the series is non-stationary. A series is said to be stationary when its mean, variance, and autocovariance don’t change much over time. # Test for stationarity aTSA::adf.test(econ_data$uempmed) ## Augmented Dickey-Fuller Test ## alternative: stationary ## ## Type 1: no drift no trend ## lag ADF p.value ## [1,] 0 -0.448 0.515 ## [2,] 1 -0.279 0.564 ## [3,] 2 -0.252 0.571 ## [4,] 3 -0.218 0.581 ## [5,] 4 -0.321 0.552 ## [6,] 5 -0.399 0.529 ## Type 2: with drift no trend ## lag ADF p.value ## [1,] 0 -3.05 0.0337 ## [2,] 1 -2.54 0.1158 ## [3,] 2 -2.43 0.1572 ## [4,] 3 -2.58 0.0986 ## [5,] 4 -2.68 0.0826 ## [6,] 5 -2.82 0.0597 ## Type 3: with drift and trend ## lag ADF p.value ## [1,] 0 -2.94 0.179 ## [2,] 1 -2.33 0.438 ## [3,] 2 -2.20 0.491 ## [4,] 3 -2.33 0.439 ## [5,] 4 -2.49 0.368 ## [6,] 5 -2.69 0.285 ## ---- ## Note: in fact, p.value = 0.01 means p.value &lt;= 0.01 # See the auto correlation acf(econ_data$uempmed) # Identify patial auto correlation Pacf(econ_data$uempmed) # Take the first differences of the series econ_data &lt;- econ_data %&gt;% mutate(diff = uempmed-lag(uempmed)) ggplot(econ_data)+ geom_point(aes(x = date, y = diff), col = &quot;grey&quot;, alpha=0.5)+ geom_smooth(aes(x = date, y = diff), col = &quot;blue&quot;)+ labs(title=&quot;1st difference (Unemployment rate)&quot;, caption = &quot;Data: ggplot2::economics&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal() + theme(legend.position=&quot;bottom&quot;)+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.title.y = element_text(margin = ggplot2::margin(t = 0, r = 3, b = 0, l = 0)))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -10)))+ theme(plot.title = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 1 rows containing non-finite values (stat_smooth). ## Warning: Removed 1 rows containing missing values (geom_point). ARIMA_model = forecast::auto.arima(econ_data$uempmed) ARIMA_model summary(ARIMA_model) checkresiduals(ARIMA_model) # Forecast for the next 10 time units ARIMA_forecast &lt;- forecast::forecast(ARIMA_model, newdata=econ_data$uempmed,h = 36,level=c(95)) # Plot forecasts plot((ARIMA_forecast)) "],["web-scraping.html", "Chapter 10 Web-scraping 10.1 Introduction 10.2 Anatomy of a webpage 10.3 Scraping a table 10.4 —", " Chapter 10 Web-scraping 10.1 Introduction Getting content off websites can be a nightmare. The worst case resort is manually typing data from a web-page into spreadsheets… but there are many steps we can do before resorting to that. This chapter will outline the process for pulling data off the web, and particularly for understanding the exact web-page element we want to extract. The notes and code loosely follow the fabulous tutorial by Grant R. McDermott in his Data Science for Economistsseries. First up, let’s load some packages. # Install development version of rvest if necessary if (numeric_version(packageVersion(&quot;rvest&quot;)) &lt; numeric_version(&#39;0.99.0&#39;)) { remotes::install_github(&#39;tidyverse/rvest&#39;) } # Load and install the packages that we&#39;ll be using today if (!require(&quot;pacman&quot;)) install.packages(&quot;pacman&quot;) pacman::p_load(tidyverse, rvest, lubridate, janitor, data.table, hrbrthemes) library(ggplot2) library(dplyr) library(tidyverse) 10.2 Anatomy of a webpage Let’s introduce some terminology: server side This describes information being embeded directly in the webpage’s HTML. When dealing with server side webpages, finding the correct CSS (or Xpath) “selectors” becomes the hardest part of the task. Iterating through dynamic webpages (e.g. “Next page” and “Show More” tabs) is also tricky - but we’ll get there. Trawling through CSS code on a webpage is a bit of a nightmare - so we’ll use a chrome extension called SelectGadget to help. The R package that’s going to do the heavy lifting is called rvest and is based on the python package called Beauty Soup. 10.3 Scraping a table Let’s use this wikipedia page as a starting example. It contains various entries for the men’s 100m running record. We can start by pulling all the data from the webpage. m100 &lt;- rvest:: read_html( &quot;http://en.wikipedia.org/wiki/Men%27s_100_metres_world_record_progression&quot;) m100 ## {html_document} ## &lt;html class=&quot;client-nojs&quot; lang=&quot;en&quot; dir=&quot;ltr&quot;&gt; ## [1] &lt;head&gt;\\n&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8 ... ## [2] &lt;body class=&quot;mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject ... …and we get a whole heap of mumbo jumbo. To get the table of ‘Unofficial progression before the IAAF’ we’re going to have to be more specific. Using the SelectGadget tool we can click around and identify that that specific table is called div+ .wikitable :nth-child(1) in the HTML code. pre_iaaf &lt;- m100 %&gt;% html_element(&quot;#mw-content-text &gt; div.mw-parser-output &gt; table:nth-child(9)&quot;) %&gt;% html_table() pre_iaaf ## # A tibble: 21 × 5 ## Time Athlete Nationality `Location of races` Date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 10.8 Luther Cary United States Paris, France July 4, 1891 ## 2 10.8 Cecil Lee United Kingdom Brussels, Belgium September 2… ## 3 10.8 Étienne De Ré Belgium Brussels, Belgium August 4, 1… ## 4 10.8 L. Atcherley United Kingdom Frankfurt/Main, Germ… April 13, 1… ## 5 10.8 Harry Beaton United Kingdom Rotterdam, Netherlan… August 28, … ## 6 10.8 Harald Anderson-Arbin Sweden Helsingborg, Sweden August 9, 1… ## 7 10.8 Isaac Westergren Sweden Gävle, Sweden September 1… ## 8 10.8 Isaac Westergren Sweden Gävle, Sweden September 1… ## 9 10.8 Frank Jarvis United States Paris, France July 14, 19… ## 10 10.8 Walter Tewksbury United States Paris, France July 14, 19… ## # … with 11 more rows Niiiiice - now that’s better. Let’s do some quick data cleaning. pre_iaaf &lt;- pre_iaaf %&gt;% clean_names() %&gt;% mutate(date = mdy(date)) pre_iaaf ## # A tibble: 21 × 5 ## time athlete nationality location_of_races date ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; ## 1 10.8 Luther Cary United States Paris, France 1891-07-04 ## 2 10.8 Cecil Lee United Kingdom Brussels, Belgium 1892-09-25 ## 3 10.8 Étienne De Ré Belgium Brussels, Belgium 1893-08-04 ## 4 10.8 L. Atcherley United Kingdom Frankfurt/Main, Germany 1895-04-13 ## 5 10.8 Harry Beaton United Kingdom Rotterdam, Netherlands 1895-08-28 ## 6 10.8 Harald Anderson-Arbin Sweden Helsingborg, Sweden 1896-08-09 ## 7 10.8 Isaac Westergren Sweden Gävle, Sweden 1898-09-11 ## 8 10.8 Isaac Westergren Sweden Gävle, Sweden 1899-09-10 ## 9 10.8 Frank Jarvis United States Paris, France 1900-07-14 ## 10 10.8 Walter Tewksbury United States Paris, France 1900-07-14 ## # … with 11 more rows Let’s also scrape the data for the more recent running records. That’s the tables called ‘Pre-automatic timing (1912–1976),’ and ‘Modern Era (1977 onwards).’ For the second table: iaaf_76 &lt;- m100 %&gt;% html_element(&quot;#mw-content-text &gt; div.mw-parser-output &gt; table:nth-child(15)&quot;) %&gt;% rvest::html_table() iaaf_76 &lt;- iaaf_76 %&gt;% clean_names() %&gt;% mutate(date = mdy(date)) iaaf_76 ## # A tibble: 54 × 8 ## time wind auto athlete nationality location_of_race date ref ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; ## 1 10.6 &quot;&quot; NA Donald Lip… United Sta… Stockholm, Sweden 1912-07-06 [2] ## 2 10.6 &quot;&quot; NA Jackson Sc… United Sta… Stockholm, Sweden 1920-09-16 [2] ## 3 10.4 &quot;&quot; NA Charley Pa… United Sta… Redlands, USA 1921-04-23 [2] ## 4 10.4 &quot;0.0&quot; NA Eddie Tolan United Sta… Stockholm, Sweden 1929-08-08 [2] ## 5 10.4 &quot;&quot; NA Eddie Tolan United Sta… Copenhagen, Denma… 1929-08-25 [2] ## 6 10.3 &quot;&quot; NA Percy Will… Canada Toronto, Canada 1930-08-09 [2] ## 7 10.3 &quot;0.4&quot; 10.4 Eddie Tolan United Sta… Los Angeles, USA 1932-08-01 [2] ## 8 10.3 &quot;&quot; NA Ralph Metc… United Sta… Budapest, Hungary 1933-08-12 [2] ## 9 10.3 &quot;&quot; NA Eulace Pea… United Sta… Oslo, Norway 1934-08-06 [2] ## 10 10.3 &quot;&quot; NA Chris Berg… Netherlands Amsterdam, Nether… 1934-08-26 [2] ## # … with 44 more rows And now for the third table: iaaf &lt;- m100 %&gt;% html_element(&quot;#mw-content-text &gt; div.mw-parser-output &gt; table:nth-child(20)&quot;) %&gt;% html_table() %&gt;% clean_names() %&gt;% mutate(date = mdy(date)) iaaf ## # A tibble: 24 × 9 ## time wind auto athlete nationality location_of_race date ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; ## 1 10.1 1.3 NA Bob Hayes United States Tokyo, Japan 1964-10-15 ## 2 10.0 0.8 NA Jim Hines United States Sacramento, USA 1968-06-20 ## 3 10.0 2.0 NA Charles Greene United States Mexico City, Mexico 1968-10-13 ## 4 9.95 0.3 NA Jim Hines United States Mexico City, Mexico 1968-10-14 ## 5 9.93 1.4 NA Calvin Smith United States Colorado Springs, … 1983-07-03 ## 6 9.83 1.0 NA Ben Johnson Canada Rome, Italy 1987-08-30 ## 7 9.93 1.0 NA Carl Lewis United States Rome, Italy 1987-08-30 ## 8 9.93 1.1 NA Carl Lewis United States Zürich, Switzerland 1988-08-17 ## 9 9.79 1.1 NA Ben Johnson Canada Seoul, South Korea 1988-09-24 ## 10 9.92 1.1 NA Carl Lewis United States Seoul, South Korea 1988-09-24 ## # … with 14 more rows, and 2 more variables: notes_note_2 &lt;chr&gt;, ## # duration_of_record &lt;chr&gt; How good. Now let’s bind the rows together to make a master data set. wr100 &lt;- rbind( pre_iaaf %&gt;% dplyr::select(time, athlete, nationality, date) %&gt;% mutate(era = &quot;Pre-IAAF&quot;), iaaf_76 %&gt;% dplyr::select(time, athlete, nationality, date) %&gt;% mutate(era = &quot;Pre-automatic&quot;), iaaf %&gt;% dplyr::select(time, athlete, nationality, date) %&gt;% mutate(era = &quot;Modern&quot;) ) wr100 ## # A tibble: 99 × 5 ## time athlete nationality date era ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;date&gt; &lt;chr&gt; ## 1 10.8 Luther Cary United States 1891-07-04 Pre-IAAF ## 2 10.8 Cecil Lee United Kingdom 1892-09-25 Pre-IAAF ## 3 10.8 Étienne De Ré Belgium 1893-08-04 Pre-IAAF ## 4 10.8 L. Atcherley United Kingdom 1895-04-13 Pre-IAAF ## 5 10.8 Harry Beaton United Kingdom 1895-08-28 Pre-IAAF ## 6 10.8 Harald Anderson-Arbin Sweden 1896-08-09 Pre-IAAF ## 7 10.8 Isaac Westergren Sweden 1898-09-11 Pre-IAAF ## 8 10.8 Isaac Westergren Sweden 1899-09-10 Pre-IAAF ## 9 10.8 Frank Jarvis United States 1900-07-14 Pre-IAAF ## 10 10.8 Walter Tewksbury United States 1900-07-14 Pre-IAAF ## # … with 89 more rows Excellent. Let’s plot the results. ggplot(wr100)+ geom_point(aes(x = date, y = time, col = era),alpha=0.7)+ labs(title=&quot;Men&#39;s 100m world record progression&quot;, subtitle = &quot;Analysing how times have improved over the past 130 years&quot;, caption = &quot;Data: Wikipedia 2021&quot;, x=&quot;&quot;, y=&quot;&quot;) + theme_minimal()+ scale_y_continuous(limits=c(9.5,11), breaks=c(9.5,10,10.5,11))+ theme(axis.text.y = element_text(vjust = -0.5, margin = ggplot2::margin(l = 20, r = -20)))+ theme(plot.subtitle = element_text(margin=ggplot2::margin(0,0,25,0))) + theme(legend.title = element_blank())+ theme(plot.title=element_text(face=&quot;bold&quot;,size=12))+ theme(plot.subtitle=element_text(size=11))+ theme(plot.caption=element_text(size=8))+ theme(axis.text=element_text(size=8))+ theme(panel.grid.minor = element_blank())+ theme(panel.grid.major.x = element_blank()) + theme(axis.line.x = element_line(colour =&quot;black&quot;,size=0.4))+ theme(axis.ticks.x = element_line(colour =&quot;black&quot;,size=0.4)) 10.4 — "],["text-mining.html", "Chapter 11 Text-mining 11.1 Power with words 11.2 Frequency analysis 11.3 Sentiment analysis", " Chapter 11 Text-mining 11.1 Power with words Numbers are great… but words literally tell a story. Analysing text (e.g. books, tweets, survey responses) in a quantitative format is naturally challenging - however there’s a few tricks which can simplify the process. This chapter outlines the process for inputting text data, and running some simple analysis. The notes and code loosely follow the fabulous book Text Mining with R by Julia Silge and David Robinson. First up, let’s load some packages. library(ggplot2) library(dplyr) library(tidyverse) library(tidytext) library(textdata) 11.2 Frequency analysis There’s a online depository called Project Gutenberg which catalogue texts that have lost their copyright (mostly because it expires over time). These can be called with the R package called gutenbergr It just so happens that The Bible is on this list. Let’s check out the most frequent words. library(gutenbergr) bible &lt;- gutenberg_download(30) bible_tidy &lt;- bible %&gt;% unnest_tokens(word, text) %&gt;% anti_join(stop_words) #Find the most common words bible_tidy %&gt;% count(word, sort=TRUE) ## # A tibble: 12,595 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 lord 7830 ## 2 thou 5474 ## 3 thy 4600 ## 4 god 4446 ## 5 ye 3982 ## 6 thee 3827 ## 7 001 2783 ## 8 002 2721 ## 9 israel 2565 ## 10 003 2560 ## # … with 12,585 more rows Somewhat unsurprisingly - “lord” wins it by a country mile. 11.3 Sentiment analysis Just like a frequency analysis, we can do a ‘vibe’ analysis (i.e. sentiment of a text) using a clever thesaurus matching technique. In the tidytext package are lexicons which include the general sentiment of words (e.g. the emotion you can use to describe that word). Let’s see the count of words most associated with ‘joy’ in the bible. #Download sentiment list nrcjoy &lt;- get_sentiments(&quot;nrc&quot;) %&gt;% filter(sentiment == &quot;joy&quot;) #Join bible words with sentiment list bible_tidy %&gt;% inner_join(nrcjoy) %&gt;% count(word, sort=TRUE) ## # A tibble: 258 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 god 4446 ## 2 art 494 ## 3 peace 429 ## 4 found 402 ## 5 glory 402 ## 6 daughter 324 ## 7 pray 313 ## 8 love 310 ## 9 blessed 302 ## 10 mighty 284 ## # … with 248 more rows "]]
